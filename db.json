{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/flow.png","path":"css/images/flow.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-config.jpg","path":"css/images/jfinal-config.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-configconstant.jpg","path":"css/images/jfinal-configconstant.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-configinter.jpg","path":"css/images/jfinal-configinter.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-css-common.jpg","path":"css/images/jfinal-css-common.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-css-add.jpg","path":"css/images/jfinal-css-add.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-configplugin.jpg","path":"css/images/jfinal-configplugin.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-css-index.jpg","path":"css/images/jfinal-css-index.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-filter.jpg","path":"css/images/jfinal-filter.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-add1.jpg","path":"css/images/jfinal-html-add1.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-change.jpg","path":"css/images/jfinal-html-change.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-add.jpg","path":"css/images/jfinal-html-add.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-add2.jpg","path":"css/images/jfinal-html-add2.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-change2.jpg","path":"css/images/jfinal-html-change2.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-index1.jpg","path":"css/images/jfinal-html-index1.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-change1.jpg","path":"css/images/jfinal-html-change1.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-index.jpg","path":"css/images/jfinal-html-index.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-html-index2.jpg","path":"css/images/jfinal-html-index2.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-jar.jpg","path":"css/images/jfinal-jar.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-page1.jpg","path":"css/images/jfinal-page1.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-page2.jpg","path":"css/images/jfinal-page2.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-page3.jpg","path":"css/images/jfinal-page3.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal.png","path":"css/images/jfinal.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-root.jpg","path":"css/images/jfinal-root.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/render-tree-construction.png","path":"css/images/render-tree-construction.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/result.png","path":"css/images/result.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/qrcode.jpg","path":"css/images/qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/whw.png","path":"css/images/whw.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","path":"vendor/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","path":"vendor/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","path":"vendor/open-sans/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/jfinal-allconfig.jpg","path":"css/images/jfinal-allconfig.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","path":"vendor/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","path":"vendor/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","path":"vendor/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","path":"vendor/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","path":"vendor/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","path":"vendor/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","path":"vendor/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","path":"vendor/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","path":"vendor/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","path":"vendor/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","path":"vendor/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","path":"vendor/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","path":"vendor/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","path":"vendor/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","path":"vendor/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","path":"vendor/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","path":"vendor/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","path":"vendor/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","path":"vendor/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","path":"vendor/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","path":"vendor/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","path":"vendor/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","path":"vendor/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","path":"vendor/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","path":"vendor/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","path":"vendor/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","path":"vendor/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","path":"vendor/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","path":"vendor/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","path":"vendor/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","path":"vendor/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","path":"vendor/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","path":"vendor/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","path":"vendor/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","path":"vendor/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","path":"vendor/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","path":"vendor/jquery/2.1.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fbaa8154c2fd3a8f1b1e5c7c14b155a4f55a9f66","modified":1490192509000},{"_id":"themes/icarus/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1490192514000},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1473434173000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1473434173000},{"_id":"themes/icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1473434173000},{"_id":"themes/icarus/_config.yml","hash":"c9634b468988dac9bad1efeee1bc670b6299bd54","modified":1473570105000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1473434173000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1473434725000},{"_id":"source/_posts/2016-06-29-promise.md","hash":"188a30c6b540750f6ec3be7ded696a2e75f2618e","modified":1473566419000},{"_id":"source/_posts/2014-07-28-jfinal-lesson01.md","hash":"1073b26fa4161a3ed04a50af6207dbac6dc128e4","modified":1473767589000},{"_id":"source/_posts/2014-07-29-jfinal-lesson02.md","hash":"0b3d3383d93cdaf8e4459fc0a1fffbaf7527f2f4","modified":1474375610000},{"_id":"source/_posts/2016-07-03-performance.md","hash":"6e5605a4b6b60cb3f96d5ab74bc26df18f45c032","modified":1473565889000},{"_id":"source/_posts/2016-11-29-fe_team.md","hash":"6b5fd28f4320083124b78ac6bbba44f282f30bdc","modified":1480427090000},{"_id":"source/_posts/2016-09-20-fe_unit_test.md","hash":"648798207d6e1c8918bb50587e5345270df73c20","modified":1474385673000},{"_id":"source/_posts/2017-01-22-TDZ.md","hash":"47f5ac3312e6504ddc4d0102b5ed975e0b133058","modified":1485071227000},{"_id":"source/_posts/2017-03-11-lihe-height.md","hash":"67cc74c6d53620740b6699534ddb2a053d321b79","modified":1490192893000},{"_id":"source/_posts/2017-03-22-reflow&repaint.md","hash":"c02402aad266a65e25f254625b8d0899fbfdafb6","modified":1490539486000},{"_id":"source/_posts/xss-1.md","hash":"0f3cab6efa7c1a58c8c10e97b0816bae4d159a30","modified":1473767614000},{"_id":"source/about/index.md","hash":"a94e415ef8a2fbe7b905d9ecf4da41a1556dce5a","modified":1473595354000},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1473434173000},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1473434173000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473434173000},{"_id":"themes/icarus/.git/config","hash":"ef1a4d603b1663bb35ba85daaebb8685271de92b","modified":1473434173000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473434077000},{"_id":"themes/icarus/.git/index","hash":"b2b0ae7234f5f00a88160d49b2f3fdcf8de24dcc","modified":1473571421000},{"_id":"themes/icarus/.git/packed-refs","hash":"89c289ccfe95476a8c32ff95249b5c8234893acc","modified":1473434173000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1473434173000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1473434173000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1473434173000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1473434173000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1473434173000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1473434173000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1473434173000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1473434173000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1473434173000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1473434173000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1473434173000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1473566578000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1473434173000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1473434173000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1473434173000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1473434173000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1473434173000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1473434173000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1473434173000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1473434173000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1473434173000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1473434173000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1473434173000},{"_id":"themes/icarus/source/.DS_Store","hash":"3037d5331d92d3f549f33102664cadfff9459707","modified":1490192514000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473434077000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1473434077000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473434077000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"d02079f6abbf8461018502fa25472325b1a8b5d8","modified":1473434173000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1473434173000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1473434173000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1473434173000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1473434173000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1473434173000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1473434173000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1473434173000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1473434173000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1473434173000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9aee307b2387f6762ff6e8226ade2c1c31251132","modified":1473434173000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1473434173000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1473434173000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"a7f115ca37738c8b99fa46d381f282c4afaefb80","modified":1473565370000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1473434173000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1473434173000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1473434173000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1473434173000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1473434173000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1473434173000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1473434173000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"a3c92f1f299e7ba11f2660457d8dcd41acf74640","modified":1473434173000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1473434173000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1473434173000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1473434173000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1473434173000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1473434173000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1473434173000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1473434173000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1473434173000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"5fd8c82a40d957e9481540a0b7d3ffca874e14a7","modified":1473569967000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1473569946000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1473434173000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1473434173000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1473434173000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1473434173000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1473434173000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1473434173000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1473434173000},{"_id":"themes/icarus/source/css/.DS_Store","hash":"aa2185724f1ef23d63d849caf0781c7464ec3677","modified":1490192521000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1473434173000},{"_id":"themes/icarus/source/css/style.styl","hash":"d19b682c53f0bb1f9d74e5956e56d80c12e87cb8","modified":1473561309000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1473434173000},{"_id":"themes/icarus/source/js/main.js","hash":"a70daacbd0c0099aae0763b29a7fec20ce222d7a","modified":1473434173000},{"_id":"themes/icarus/.git/objects/pack/pack-b8e9301c24e391489982c23428d52344717cc8f0.idx","hash":"0ec7fe019cb57855493f29ed4037d7839128ef7c","modified":1473434171000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"da1b52a5fb8f77420c11130c04b0bff587f24791","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1473434173000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"dd8329d75a8312785611b5ec422bd49afc628c1c","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"b6d06f3c7d01a078bc74f3ef9f5192e51b63cefe","modified":1473595402000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"c70f867249eaad0faded79e8dec903b3b14bed75","modified":1473561450000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1473434173000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1473434173000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1473434173000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1473434173000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1473434173000},{"_id":"themes/icarus/source/css/images/flow.png","hash":"91f27c6a72f02f3ef2d7fa493f803bcbd12059f3","modified":1460963074000},{"_id":"themes/icarus/source/css/images/.DS_Store","hash":"a2fb44afd44209901856e03b3b0f02c83f9f081b","modified":1490192526000},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"1370ca8c94eb942bc809f71ab9995ea75cc6900a","modified":1445584617000},{"_id":"themes/icarus/source/css/images/jfinal-config.jpg","hash":"1231f8c2ade641a450edbf54e928ec27ef692ed2","modified":1469281538000},{"_id":"themes/icarus/source/css/images/jfinal-configconstant.jpg","hash":"18651295c5cbfab6404c5731cbee2ad7f8e26f06","modified":1469281709000},{"_id":"themes/icarus/source/css/images/jfinal-configinter.jpg","hash":"234f3fdda5ccdcc62ac2c87b96343f2055393c33","modified":1469281944000},{"_id":"themes/icarus/source/css/images/jfinal-css-common.jpg","hash":"989277b37e73f1801e91fd2c72555e5589980f6f","modified":1468032930000},{"_id":"themes/icarus/source/css/images/jfinal-css-add.jpg","hash":"c5c70a4187a3a3e4b70891ade68286c2ad3f7961","modified":1468032941000},{"_id":"themes/icarus/source/css/images/jfinal-configplugin.jpg","hash":"5ae907d868d22a9bcb6604dc5392cdf1024b2f8a","modified":1469281859000},{"_id":"themes/icarus/source/css/images/jfinal-css-index.jpg","hash":"025cdd92c158db865a9adf41bc03959985d18c85","modified":1468032953000},{"_id":"themes/icarus/source/css/images/jfinal-filter.jpg","hash":"a49145a047d35a594cf2bbb8ac40489b9825bc2c","modified":1468596149000},{"_id":"themes/icarus/source/css/images/jfinal-html-add1.jpg","hash":"ec1719089ea62b042b8141fa60a7a7689bbc8e8a","modified":1468032860000},{"_id":"themes/icarus/source/css/images/jfinal-html-change.jpg","hash":"ad94066a3b5cb6b4227dbeb598e03591c77cf5a2","modified":1468032757000},{"_id":"themes/icarus/source/css/images/jfinal-html-add.jpg","hash":"ec1719089ea62b042b8141fa60a7a7689bbc8e8a","modified":1468032745000},{"_id":"themes/icarus/source/css/images/jfinal-html-add2.jpg","hash":"4af465f0390f82f284494694bdf5d23eb6fd0a72","modified":1468032870000},{"_id":"themes/icarus/source/css/images/jfinal-html-change2.jpg","hash":"7672cee3843893bcfa3904422b87775a1e88c4dd","modified":1468032888000},{"_id":"themes/icarus/source/css/images/jfinal-html-index1.jpg","hash":"7c0f669e51cb1502c539cea9bbd8abd86bd863a2","modified":1468032842000},{"_id":"themes/icarus/source/css/images/jfinal-html-change1.jpg","hash":"ad94066a3b5cb6b4227dbeb598e03591c77cf5a2","modified":1468032879000},{"_id":"themes/icarus/source/css/images/jfinal-html-index.jpg","hash":"589ec02cbea36ec6ea93adce429eec5f3049c43c","modified":1468032628000},{"_id":"themes/icarus/source/css/images/jfinal-html-index2.jpg","hash":"d6f6937bab0b34b895b7793073e92bee6f4e1aad","modified":1468032852000},{"_id":"themes/icarus/source/css/images/jfinal-jar.jpg","hash":"cd8ba7a2463c50aa199b2591d517519abdfacd6d","modified":1468032202000},{"_id":"themes/icarus/source/css/images/jfinal-page1.jpg","hash":"2c81ae3b35322c0d9bf087a9984f6b20ed2de7b0","modified":1468033056000},{"_id":"themes/icarus/source/css/images/jfinal-page2.jpg","hash":"8cc8c41aade622cb811936fa536f508ea23fe715","modified":1468033068000},{"_id":"themes/icarus/source/css/images/jfinal-page3.jpg","hash":"d001e7ea4dffb2cf5f3da8daaad04c59db170799","modified":1468033074000},{"_id":"themes/icarus/source/css/images/jfinal.png","hash":"31b0c67affa405a4b7a2656bcb269e7cc6904afb","modified":1467902024000},{"_id":"themes/icarus/source/css/images/jfinal-root.jpg","hash":"c16b712e19fcca3c46139133a3117aa12eec6f36","modified":1468033019000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1473434173000},{"_id":"themes/icarus/source/css/images/render-tree-construction.png","hash":"147a4d5332b4d414b17e6692b8ff877cb8b8705f","modified":1490186575000},{"_id":"themes/icarus/source/css/images/result.png","hash":"48cd756f11d92bcf220ea67e61b8e3bc65165de7","modified":1474384079000},{"_id":"themes/icarus/source/css/images/qrcode.jpg","hash":"44dc43a9db3b62f8d8c6ca9be6c84853434f3e85","modified":1467425145000},{"_id":"themes/icarus/source/css/images/whw.png","hash":"c7ef6c6bdf969019af53330f3f9e4e64f6505fe5","modified":1460963074000},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1473434173000},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1473434173000},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1473434173000},{"_id":"themes/icarus/source/css/images/jfinal-allconfig.jpg","hash":"f0125074c3c433f6a55253c870d3f0eb0f940c22","modified":1468032301000},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473434173000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"d02079f6abbf8461018502fa25472325b1a8b5d8","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1473434173000},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1473434173000},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1473434173000},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1473434173000},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1473434173000},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473434173000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"d02079f6abbf8461018502fa25472325b1a8b5d8","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1473434173000},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1473434173000},{"_id":"themes/icarus/.git/objects/pack/pack-b8e9301c24e391489982c23428d52344717cc8f0.pack","hash":"3210cda763002825c3a05b47d2423ebb292903d3","modified":1473434171000}],"Category":[{"name":"Promise","_id":"cj0qt08wk0002c3x1m3tmqcdw"},{"name":"JFinal","_id":"cj0qt08x20007c3x1ynid1zgn"},{"name":"前端性能优化","_id":"cj0qt08xa000cc3x11axcv8vc"},{"name":"自动化单元测试","_id":"cj0qt08xe000hc3x1a8186z40"},{"name":"FE team","_id":"cj0qt08xg000mc3x1hkpg012v"},{"name":"TDZ（Temporal Dead Zone）","_id":"cj0qt08yw0012c3x1zypx4fxo"},{"name":"line-height","_id":"cj0qt08z40017c3x1545ija4m"},{"name":"XSS","_id":"cj0qt08z7001ac3x1213brqi1"},{"name":"浏览器渲染","_id":"cj0qt08z9001dc3x1i8kc6zba"}],"Data":[],"Page":[{"title":"关于我","layout":"page","_content":"<ul class=\"personal-info\">\n\t姓名：程仁\n\t出生年月：1992.9\n\t家乡：江西上饶\n\t现在所在公司：丁香园\n\t邮箱 <a href=\"mailto:acrens@163com\">acrens@163com</a>\n\tgithub (<a href=\"//github.com/acrens\">GitHub</a>)\n</ul>\n<div>\n\t<img class=\"blog-qrcode\" src=\"/css/images/qrcode.jpg\" alt=\"\">\n\t<p class=\"blog-qrcode_text\">扫一扫，加好友</p>\n</div>","source":"about/index.md","raw":"title: \"关于我\"\nlayout: \"page\"\n---\n<ul class=\"personal-info\">\n\t姓名：程仁\n\t出生年月：1992.9\n\t家乡：江西上饶\n\t现在所在公司：丁香园\n\t邮箱 <a href=\"mailto:acrens@163com\">acrens@163com</a>\n\tgithub (<a href=\"//github.com/acrens\">GitHub</a>)\n</ul>\n<div>\n\t<img class=\"blog-qrcode\" src=\"/css/images/qrcode.jpg\" alt=\"\">\n\t<p class=\"blog-qrcode_text\">扫一扫，加好友</p>\n</div>","date":"2016-09-11T12:02:34.000Z","updated":"2016-09-11T12:02:34.000Z","path":"about/index.html","comments":1,"_id":"cj0qt08yn000zc3x19okobmk8","content":"<p><ul class=\"personal-info\"><br>    姓名：程仁<br>    出生年月：1992.9<br>    家乡：江西上饶<br>    现在所在公司：丁香园<br>    邮箱 <a href=\"mailto:acrens@163com\" target=\"_blank\" rel=\"external\">acrens@163com</a><br>    github (<a href=\"//github.com/acrens\">GitHub</a>)<br></ul></p>\n<div><br>    <img class=\"blog-qrcode\" src=\"/css/images/qrcode.jpg\" alt=\"\"><br>    <p class=\"blog-qrcode_text\">扫一扫，加好友</p><br></div>","excerpt":"","more":"<p><ul class=\"personal-info\"><br>    姓名：程仁<br>    出生年月：1992.9<br>    家乡：江西上饶<br>    现在所在公司：丁香园<br>    邮箱 <a href=\"mailto:acrens@163com\">acrens@163com</a><br>    github (<a href=\"//github.com/acrens\">GitHub</a>)<br></ul></p>\n<div><br>    <img class=\"blog-qrcode\" src=\"/css/images/qrcode.jpg\" alt=\"\"><br>    <p class=\"blog-qrcode_text\">扫一扫，加好友</p><br></div>"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2016-09-09T15:23:09.000Z","updated":"2016-09-09T15:16:13.000Z","path":"categories/index.html","comments":1,"_id":"cj0qt08yt0011c3x1q28gyua0","content":"","excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2016-09-09T15:23:09.000Z","updated":"2016-09-09T15:16:13.000Z","path":"tags/index.html","comments":1,"_id":"cj0qt08yy0015c3x15kyqj72u","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"Promise 讲解","date":"2016-06-29T09:21:14.000Z","description":"Promise","author":"acrens","published":1,"_content":"\n>曾经有伟人说过，对于一件新鲜事物，如果需要搞明白他，就会有以下三个步骤：What、How、Why（学习、思维三部曲 或 叫做学习黄金圈）；而对于很多人，在学习一门技术时，都停留在 What 阶段，到使用时就不知道如何使用，就算使用了也不知道为什么要用。\n<!--more-->\n\n![黄金圈](/css/images/whw.png)\n\n---\n\n### What（Promise 是什么）\n\n#### 描述\nPromise 是抽象异步处理对象以及对其进行各种操作的组件，而且 Promise 并不是从 JavaScript 中发祥的概念。\n#### 状态\nPromise 具有三种状态，分别为 pending（执行中）、resolved（被接受）、rejected（被拒绝）。\n#### 方法\n##### 实例化：\n\n- var promise = new Promise(function(resolve, reject) {});\n- Promise.resolve() 等方法均可以直接返回一个新创建的 Promise 对象。\n\n##### 静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：\n\n- Promise.all()\n\nPromise.all 方法为 Promise 组件的静态方法，无需创建 Promise 对象就可以直接使用此方法来并行执行多个 Promise 对象，且在 Promise.all([\"Promise1\"，\"Promise2\"， \"Promise2\"])，如果在 all 方法参数的数组中有一个 Promise 对象执行失败即停止执行，返回结果需要等到数组对象执行完成才返回最后结果，结果为多个 Promise 对象返回值组成的数组。 \n代码：\n``` javascript\nvar p1 = Promise.resolve(1)；\nvar p2 = Promise.resolve(2)；\nvar p3 = Promise.resolve(3);\nPromise.all([p1, p2, p3]).then(function(results) {\n    console.log(results);  // [1, 2, 3]\n});\n```\n\n- Promise.race()\n\nPromise.race 方法性质同 Promise.all 方法，使用方式也一样，但是有一点不同是在 Promise.race([\"Promise1\"，\"Promise2\"，\"Promise3\"]) 等到数组参数里面第一个 Promise 对象执行完成就返回执行结果（这里说的第一个不是第一个参数，也可能是第二个，是指第一个执行完成的 Promise 对象）。\n代码：\n``` javascript\nPromise.race([new Promise(), new Promise(), new Promise()])；\n```\n\n- Promise.resolve()\n\n这是一种直接到达 Promise resolved 状态的快捷方式，并且创建返回一个 Promise 对象。\n代码：\n``` javascript\nPromise.resolve(\"acrens\").then(function(name) {\n    console.log(name); // acrens\n});\n```\n\n- Promise.reject()\n\n同理，这是达到 Promise rejected 状态的快捷方式，并且创建返回一个进行 reject 的新 Promise 对象。如果传入的参数为一个 Promise 对象，则返回的是一个新的 Promise 对象（和 resolve 不同）。\n代码：\n``` javascript\nPromise.reject(new Error(\"error\"))；\n```\n\n##### 对象方法：new Promise().then、new Promise().catch：\n\n- then()\n\n用于注册 Promise 分别达到 resolved、rejected 状态时的回调函数，如：then(resolve, reject)，当达到 resolved 状态时，执行 resolve 方法，否则，执行 reject 方法；reject 函数可以不在此注册，可以使用 catch 注册（这也是注册 reject 方式的语法糖，更方便 Promise 链方法）；如果不需要注册 resolved 状态时的回调函数，then 方法第一个参数不可以省略，但是可以 then(undefined, reject) 这样书写。\n代码：\n``` javascript\nvar promise = new Promise(function(resolve, reject) {\n    resolve(2);\n});\n\npromise.then(function(value) {\n    console.info('Task --------- ' + value); // Task  --------- 2\n}).catch(function onRejected(error) {\n    console.error(error);\n});\n```\n\n- catch()\n\ncatch 方法在此就不多赘述，其只是注册 rejected 状态回调函数的语法糖。\n代码：（参照上面 then 方法代码示例）。\n\n---\n\n### How（Promise 如何运行）\nPromise 从实例化到执行完成可以参照下图并结合上述代码理解（只有认真地去理解这个流程图，才可以看到 Promise 的精髓，坏笑...）：\n![执行流程](/css/images/flow.png)\n注意：fulfill 就相当 resolved 状态。\n\n---\n\n### Why（Promise 为什么会产生）\nPromise 需要解决的问题也就是其产生的原因（废话）：\n\n- 异步问题\n\n用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。（事件轮询、并发模式）\n\n- 回调地狱\n\n并不是简单地理解为代码嵌套，编辑器代码缩进空格；还包括代码的控制转移（如在回调之前进行的第三方调用，控制权转交给第三方）。\n\n--- \n### 总结\n在项目开发中，时常会使用到异步处理及代码多层嵌套，这对于后期理解和维护代码是一个“坑”，因此可以尝试使用 Promise 方式去解决代码给后期带来的负担。\n\n- [https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html](https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html)\n- [http://liubin.org/promises-book/#introduction](http://liubin.org/promises-book/#introduction)\n- [http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/](http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/)\n- [http://www.sitepoint.com/overview-javascript-promises/](http://www.sitepoint.com/overview-javascript-promises/)\n- [http://blog.getify.com/promises-part-1/](http://blog.getify.com/promises-part-1/) （译文：[https://segmentfault.com/a/1190000000586666](https://segmentfault.com/a/1190000000586666)）\n- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)","source":"_posts/2016-06-29-promise.md","raw":"---\nlayout: post\ntitle:  \"Promise 讲解\"\ndate:   2016-06-29 09:21:14 +0800\ncategories: Promise\ntags: \n- Promise\ndescription: \"Promise\"\nauthor: \"acrens\"\npublished: true\n---\n\n>曾经有伟人说过，对于一件新鲜事物，如果需要搞明白他，就会有以下三个步骤：What、How、Why（学习、思维三部曲 或 叫做学习黄金圈）；而对于很多人，在学习一门技术时，都停留在 What 阶段，到使用时就不知道如何使用，就算使用了也不知道为什么要用。\n<!--more-->\n\n![黄金圈](/css/images/whw.png)\n\n---\n\n### What（Promise 是什么）\n\n#### 描述\nPromise 是抽象异步处理对象以及对其进行各种操作的组件，而且 Promise 并不是从 JavaScript 中发祥的概念。\n#### 状态\nPromise 具有三种状态，分别为 pending（执行中）、resolved（被接受）、rejected（被拒绝）。\n#### 方法\n##### 实例化：\n\n- var promise = new Promise(function(resolve, reject) {});\n- Promise.resolve() 等方法均可以直接返回一个新创建的 Promise 对象。\n\n##### 静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：\n\n- Promise.all()\n\nPromise.all 方法为 Promise 组件的静态方法，无需创建 Promise 对象就可以直接使用此方法来并行执行多个 Promise 对象，且在 Promise.all([\"Promise1\"，\"Promise2\"， \"Promise2\"])，如果在 all 方法参数的数组中有一个 Promise 对象执行失败即停止执行，返回结果需要等到数组对象执行完成才返回最后结果，结果为多个 Promise 对象返回值组成的数组。 \n代码：\n``` javascript\nvar p1 = Promise.resolve(1)；\nvar p2 = Promise.resolve(2)；\nvar p3 = Promise.resolve(3);\nPromise.all([p1, p2, p3]).then(function(results) {\n    console.log(results);  // [1, 2, 3]\n});\n```\n\n- Promise.race()\n\nPromise.race 方法性质同 Promise.all 方法，使用方式也一样，但是有一点不同是在 Promise.race([\"Promise1\"，\"Promise2\"，\"Promise3\"]) 等到数组参数里面第一个 Promise 对象执行完成就返回执行结果（这里说的第一个不是第一个参数，也可能是第二个，是指第一个执行完成的 Promise 对象）。\n代码：\n``` javascript\nPromise.race([new Promise(), new Promise(), new Promise()])；\n```\n\n- Promise.resolve()\n\n这是一种直接到达 Promise resolved 状态的快捷方式，并且创建返回一个 Promise 对象。\n代码：\n``` javascript\nPromise.resolve(\"acrens\").then(function(name) {\n    console.log(name); // acrens\n});\n```\n\n- Promise.reject()\n\n同理，这是达到 Promise rejected 状态的快捷方式，并且创建返回一个进行 reject 的新 Promise 对象。如果传入的参数为一个 Promise 对象，则返回的是一个新的 Promise 对象（和 resolve 不同）。\n代码：\n``` javascript\nPromise.reject(new Error(\"error\"))；\n```\n\n##### 对象方法：new Promise().then、new Promise().catch：\n\n- then()\n\n用于注册 Promise 分别达到 resolved、rejected 状态时的回调函数，如：then(resolve, reject)，当达到 resolved 状态时，执行 resolve 方法，否则，执行 reject 方法；reject 函数可以不在此注册，可以使用 catch 注册（这也是注册 reject 方式的语法糖，更方便 Promise 链方法）；如果不需要注册 resolved 状态时的回调函数，then 方法第一个参数不可以省略，但是可以 then(undefined, reject) 这样书写。\n代码：\n``` javascript\nvar promise = new Promise(function(resolve, reject) {\n    resolve(2);\n});\n\npromise.then(function(value) {\n    console.info('Task --------- ' + value); // Task  --------- 2\n}).catch(function onRejected(error) {\n    console.error(error);\n});\n```\n\n- catch()\n\ncatch 方法在此就不多赘述，其只是注册 rejected 状态回调函数的语法糖。\n代码：（参照上面 then 方法代码示例）。\n\n---\n\n### How（Promise 如何运行）\nPromise 从实例化到执行完成可以参照下图并结合上述代码理解（只有认真地去理解这个流程图，才可以看到 Promise 的精髓，坏笑...）：\n![执行流程](/css/images/flow.png)\n注意：fulfill 就相当 resolved 状态。\n\n---\n\n### Why（Promise 为什么会产生）\nPromise 需要解决的问题也就是其产生的原因（废话）：\n\n- 异步问题\n\n用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。（事件轮询、并发模式）\n\n- 回调地狱\n\n并不是简单地理解为代码嵌套，编辑器代码缩进空格；还包括代码的控制转移（如在回调之前进行的第三方调用，控制权转交给第三方）。\n\n--- \n### 总结\n在项目开发中，时常会使用到异步处理及代码多层嵌套，这对于后期理解和维护代码是一个“坑”，因此可以尝试使用 Promise 方式去解决代码给后期带来的负担。\n\n- [https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html](https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html)\n- [http://liubin.org/promises-book/#introduction](http://liubin.org/promises-book/#introduction)\n- [http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/](http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/)\n- [http://www.sitepoint.com/overview-javascript-promises/](http://www.sitepoint.com/overview-javascript-promises/)\n- [http://blog.getify.com/promises-part-1/](http://blog.getify.com/promises-part-1/) （译文：[https://segmentfault.com/a/1190000000586666](https://segmentfault.com/a/1190000000586666)）\n- [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)","slug":"2016-06-29-promise","updated":"2016-09-11T04:00:19.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08w50000c3x1697cdlfx","content":"<blockquote>\n<p>曾经有伟人说过，对于一件新鲜事物，如果需要搞明白他，就会有以下三个步骤：What、How、Why（学习、思维三部曲 或 叫做学习黄金圈）；而对于很多人，在学习一门技术时，都停留在 What 阶段，到使用时就不知道如何使用，就算使用了也不知道为什么要用。<br><a id=\"more\"></a></p>\n</blockquote>\n<p><img src=\"/css/images/whw.png\" alt=\"黄金圈\"></p>\n<hr>\n<h3 id=\"What（Promise-是什么）\"><a href=\"#What（Promise-是什么）\" class=\"headerlink\" title=\"What（Promise 是什么）\"></a>What（Promise 是什么）</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>Promise 是抽象异步处理对象以及对其进行各种操作的组件，而且 Promise 并不是从 JavaScript 中发祥的概念。</p>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><p>Promise 具有三种状态，分别为 pending（执行中）、resolved（被接受）、rejected（被拒绝）。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"实例化：\"><a href=\"#实例化：\" class=\"headerlink\" title=\"实例化：\"></a>实例化：</h5><ul>\n<li>var promise = new Promise(function(resolve, reject) {});</li>\n<li>Promise.resolve() 等方法均可以直接返回一个新创建的 Promise 对象。</li>\n</ul>\n<h5 id=\"静态方法：Promise-all、Promise-race、Promise-resolve、Promise-reject：\"><a href=\"#静态方法：Promise-all、Promise-race、Promise-resolve、Promise-reject：\" class=\"headerlink\" title=\"静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：\"></a>静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：</h5><ul>\n<li>Promise.all()</li>\n</ul>\n<p>Promise.all 方法为 Promise 组件的静态方法，无需创建 Promise 对象就可以直接使用此方法来并行执行多个 Promise 对象，且在 Promise.all([“Promise1”，”Promise2”， “Promise2”])，如果在 all 方法参数的数组中有一个 Promise 对象执行失败即停止执行，返回结果需要等到数组对象执行完成才返回最后结果，结果为多个 Promise 对象返回值组成的数组。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)；</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>)；</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(results);  <span class=\"comment\">// [1, 2, 3]</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.race()</li>\n</ul>\n<p>Promise.race 方法性质同 Promise.all 方法，使用方式也一样，但是有一点不同是在 Promise.race([“Promise1”，”Promise2”，”Promise3”]) 等到数组参数里面第一个 Promise 对象执行完成就返回执行结果（这里说的第一个不是第一个参数，也可能是第二个，是指第一个执行完成的 Promise 对象）。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.race([<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(), <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(), <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()])；</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.resolve()</li>\n</ul>\n<p>这是一种直接到达 Promise resolved 状态的快捷方式，并且创建返回一个 Promise 对象。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"acrens\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// acrens</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.reject()</li>\n</ul>\n<p>同理，这是达到 Promise rejected 状态的快捷方式，并且创建返回一个进行 reject 的新 Promise 对象。如果传入的参数为一个 Promise 对象，则返回的是一个新的 Promise 对象（和 resolve 不同）。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"error\"</span>))；</div></pre></td></tr></table></figure></p>\n<h5 id=\"对象方法：new-Promise-then、new-Promise-catch：\"><a href=\"#对象方法：new-Promise-then、new-Promise-catch：\" class=\"headerlink\" title=\"对象方法：new Promise().then、new Promise().catch：\"></a>对象方法：new Promise().then、new Promise().catch：</h5><ul>\n<li>then()</li>\n</ul>\n<p>用于注册 Promise 分别达到 resolved、rejected 状态时的回调函数，如：then(resolve, reject)，当达到 resolved 状态时，执行 resolve 方法，否则，执行 reject 方法；reject 函数可以不在此注册，可以使用 catch 注册（这也是注册 reject 方式的语法糖，更方便 Promise 链方法）；如果不需要注册 resolved 状态时的回调函数，then 方法第一个参数不可以省略，但是可以 then(undefined, reject) 这样书写。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    resolve(<span class=\"number\">2</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'Task --------- '</span> + value); <span class=\"comment\">// Task  --------- 2</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>catch()</li>\n</ul>\n<p>catch 方法在此就不多赘述，其只是注册 rejected 状态回调函数的语法糖。<br>代码：（参照上面 then 方法代码示例）。</p>\n<hr>\n<h3 id=\"How（Promise-如何运行）\"><a href=\"#How（Promise-如何运行）\" class=\"headerlink\" title=\"How（Promise 如何运行）\"></a>How（Promise 如何运行）</h3><p>Promise 从实例化到执行完成可以参照下图并结合上述代码理解（只有认真地去理解这个流程图，才可以看到 Promise 的精髓，坏笑…）：<br><img src=\"/css/images/flow.png\" alt=\"执行流程\"><br>注意：fulfill 就相当 resolved 状态。</p>\n<hr>\n<h3 id=\"Why（Promise-为什么会产生）\"><a href=\"#Why（Promise-为什么会产生）\" class=\"headerlink\" title=\"Why（Promise 为什么会产生）\"></a>Why（Promise 为什么会产生）</h3><p>Promise 需要解决的问题也就是其产生的原因（废话）：</p>\n<ul>\n<li>异步问题</li>\n</ul>\n<p>用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。（事件轮询、并发模式）</p>\n<ul>\n<li>回调地狱</li>\n</ul>\n<p>并不是简单地理解为代码嵌套，编辑器代码缩进空格；还包括代码的控制转移（如在回调之前进行的第三方调用，控制权转交给第三方）。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在项目开发中，时常会使用到异步处理及代码多层嵌套，这对于后期理解和维护代码是一个“坑”，因此可以尝试使用 Promise 方式去解决代码给后期带来的负担。</p>\n<ul>\n<li><a href=\"https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html\" target=\"_blank\" rel=\"external\">https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html</a></li>\n<li><a href=\"http://liubin.org/promises-book/#introduction\" target=\"_blank\" rel=\"external\">http://liubin.org/promises-book/#introduction</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/</a></li>\n<li><a href=\"http://www.sitepoint.com/overview-javascript-promises/\" target=\"_blank\" rel=\"external\">http://www.sitepoint.com/overview-javascript-promises/</a></li>\n<li><a href=\"http://blog.getify.com/promises-part-1/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-1/</a> （译文：<a href=\"https://segmentfault.com/a/1190000000586666\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000000586666</a>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n</ul>\n","excerpt":"<blockquote>\n<p>曾经有伟人说过，对于一件新鲜事物，如果需要搞明白他，就会有以下三个步骤：What、How、Why（学习、思维三部曲 或 叫做学习黄金圈）；而对于很多人，在学习一门技术时，都停留在 What 阶段，到使用时就不知道如何使用，就算使用了也不知道为什么要用。<br>","more":"</p>\n</blockquote>\n<p><img src=\"/css/images/whw.png\" alt=\"黄金圈\"></p>\n<hr>\n<h3 id=\"What（Promise-是什么）\"><a href=\"#What（Promise-是什么）\" class=\"headerlink\" title=\"What（Promise 是什么）\"></a>What（Promise 是什么）</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>Promise 是抽象异步处理对象以及对其进行各种操作的组件，而且 Promise 并不是从 JavaScript 中发祥的概念。</p>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><p>Promise 具有三种状态，分别为 pending（执行中）、resolved（被接受）、rejected（被拒绝）。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"实例化：\"><a href=\"#实例化：\" class=\"headerlink\" title=\"实例化：\"></a>实例化：</h5><ul>\n<li>var promise = new Promise(function(resolve, reject) {});</li>\n<li>Promise.resolve() 等方法均可以直接返回一个新创建的 Promise 对象。</li>\n</ul>\n<h5 id=\"静态方法：Promise-all、Promise-race、Promise-resolve、Promise-reject：\"><a href=\"#静态方法：Promise-all、Promise-race、Promise-resolve、Promise-reject：\" class=\"headerlink\" title=\"静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：\"></a>静态方法：Promise.all、Promise.race、Promise.resolve、Promise.reject：</h5><ul>\n<li>Promise.all()</li>\n</ul>\n<p>Promise.all 方法为 Promise 组件的静态方法，无需创建 Promise 对象就可以直接使用此方法来并行执行多个 Promise 对象，且在 Promise.all([“Promise1”，”Promise2”， “Promise2”])，如果在 all 方法参数的数组中有一个 Promise 对象执行失败即停止执行，返回结果需要等到数组对象执行完成才返回最后结果，结果为多个 Promise 对象返回值组成的数组。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>)；</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>)；</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(results);  <span class=\"comment\">// [1, 2, 3]</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.race()</li>\n</ul>\n<p>Promise.race 方法性质同 Promise.all 方法，使用方式也一样，但是有一点不同是在 Promise.race([“Promise1”，”Promise2”，”Promise3”]) 等到数组参数里面第一个 Promise 对象执行完成就返回执行结果（这里说的第一个不是第一个参数，也可能是第二个，是指第一个执行完成的 Promise 对象）。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.race([<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(), <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(), <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()])；</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.resolve()</li>\n</ul>\n<p>这是一种直接到达 Promise resolved 状态的快捷方式，并且创建返回一个 Promise 对象。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">\"acrens\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// acrens</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Promise.reject()</li>\n</ul>\n<p>同理，这是达到 Promise rejected 状态的快捷方式，并且创建返回一个进行 reject 的新 Promise 对象。如果传入的参数为一个 Promise 对象，则返回的是一个新的 Promise 对象（和 resolve 不同）。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"error\"</span>))；</div></pre></td></tr></table></figure></p>\n<h5 id=\"对象方法：new-Promise-then、new-Promise-catch：\"><a href=\"#对象方法：new-Promise-then、new-Promise-catch：\" class=\"headerlink\" title=\"对象方法：new Promise().then、new Promise().catch：\"></a>对象方法：new Promise().then、new Promise().catch：</h5><ul>\n<li>then()</li>\n</ul>\n<p>用于注册 Promise 分别达到 resolved、rejected 状态时的回调函数，如：then(resolve, reject)，当达到 resolved 状态时，执行 resolve 方法，否则，执行 reject 方法；reject 函数可以不在此注册，可以使用 catch 注册（这也是注册 reject 方式的语法糖，更方便 Promise 链方法）；如果不需要注册 resolved 状态时的回调函数，then 方法第一个参数不可以省略，但是可以 then(undefined, reject) 这样书写。<br>代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    resolve(<span class=\"number\">2</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">'Task --------- '</span> + value); <span class=\"comment\">// Task  --------- 2</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRejected</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>catch()</li>\n</ul>\n<p>catch 方法在此就不多赘述，其只是注册 rejected 状态回调函数的语法糖。<br>代码：（参照上面 then 方法代码示例）。</p>\n<hr>\n<h3 id=\"How（Promise-如何运行）\"><a href=\"#How（Promise-如何运行）\" class=\"headerlink\" title=\"How（Promise 如何运行）\"></a>How（Promise 如何运行）</h3><p>Promise 从实例化到执行完成可以参照下图并结合上述代码理解（只有认真地去理解这个流程图，才可以看到 Promise 的精髓，坏笑…）：<br><img src=\"/css/images/flow.png\" alt=\"执行流程\"><br>注意：fulfill 就相当 resolved 状态。</p>\n<hr>\n<h3 id=\"Why（Promise-为什么会产生）\"><a href=\"#Why（Promise-为什么会产生）\" class=\"headerlink\" title=\"Why（Promise 为什么会产生）\"></a>Why（Promise 为什么会产生）</h3><p>Promise 需要解决的问题也就是其产生的原因（废话）：</p>\n<ul>\n<li>异步问题</li>\n</ul>\n<p>用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。（事件轮询、并发模式）</p>\n<ul>\n<li>回调地狱</li>\n</ul>\n<p>并不是简单地理解为代码嵌套，编辑器代码缩进空格；还包括代码的控制转移（如在回调之前进行的第三方调用，控制权转交给第三方）。</p>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在项目开发中，时常会使用到异步处理及代码多层嵌套，这对于后期理解和维护代码是一个“坑”，因此可以尝试使用 Promise 方式去解决代码给后期带来的负担。</p>\n<ul>\n<li><a href=\"https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html\">https://www.web-tinker.com/search/Promise%20%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/1.html</a></li>\n<li><a href=\"http://liubin.org/promises-book/#introduction\">http://liubin.org/promises-book/#introduction</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/\">http://www.zhangxinxu.com/wordpress/2014/02/es6-javascript-promise-%E6%84%9F%E6%80%A7%E8%AE%A4%E7%9F%A5/</a></li>\n<li><a href=\"http://www.sitepoint.com/overview-javascript-promises/\">http://www.sitepoint.com/overview-javascript-promises/</a></li>\n<li><a href=\"http://blog.getify.com/promises-part-1/\">http://blog.getify.com/promises-part-1/</a> （译文：<a href=\"https://segmentfault.com/a/1190000000586666\">https://segmentfault.com/a/1190000000586666</a>）</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>\n</ul>"},{"layout":"post","title":"JFinal学习笔记-知识介绍-lesson01","date":"2014-07-28T22:21:24.000Z","description":"JFinal 知识介绍","author":"acrens","published":1,"_content":"> JFinal 相关文章是个人刚毕业不久使用过的一个 Java 后台框架，感觉上手容易，搭建迅速，易于构建小型 Web 项目，以此对 JFinal 做个记录。\n<!--more-->\n\n### JFinal 是 Java 极速 Web 开发的开源框架\n一、优点：入手快、学习花费少、开发迅速、代码量很少、易扩展、RESTful风格（扩展性好）。\n二、缺点：比较适合于小型WEB应用开发。\n三、特点：\n1. MVC 架构、设计精巧;\n1. 遵循 COC 原则、零配置、无附带xml文件;\n1. 独创Db + Record模式、灵活便利;\n1. ActiveRecord 支持，使数据库开发极致快速;\n1. 自动加载修改后的 java 文件，开发过程中无需重启 web server(如：tomcat);\n1. AOP 支持，拦截器配置灵活，功能强大;\n1. Plugin体系结构，扩展性强;\n1. 多视图支持，支持 FreeMarker、JSP、Velocity;\n1. 强大的 Validator 后端校验功能;\n1. 功能齐全，拥有 struts2 绝大部分核心功能;\n1. 体积小仅 218K，且无第三方依赖。\n\n四、体系架构\n![JFinal 架构图](/css/images/jfinal.png)","source":"_posts/2014-07-28-jfinal-lesson01.md","raw":"---\nlayout: post\ntitle:  \"JFinal学习笔记-知识介绍-lesson01\"\ndate:   2014-07-28 22:21:24 +0800\ncategories: JFinal\ntags: \n- JFinal\ndescription: \"JFinal 知识介绍\"\nauthor: \"acrens\"\npublished: true\n---\n> JFinal 相关文章是个人刚毕业不久使用过的一个 Java 后台框架，感觉上手容易，搭建迅速，易于构建小型 Web 项目，以此对 JFinal 做个记录。\n<!--more-->\n\n### JFinal 是 Java 极速 Web 开发的开源框架\n一、优点：入手快、学习花费少、开发迅速、代码量很少、易扩展、RESTful风格（扩展性好）。\n二、缺点：比较适合于小型WEB应用开发。\n三、特点：\n1. MVC 架构、设计精巧;\n1. 遵循 COC 原则、零配置、无附带xml文件;\n1. 独创Db + Record模式、灵活便利;\n1. ActiveRecord 支持，使数据库开发极致快速;\n1. 自动加载修改后的 java 文件，开发过程中无需重启 web server(如：tomcat);\n1. AOP 支持，拦截器配置灵活，功能强大;\n1. Plugin体系结构，扩展性强;\n1. 多视图支持，支持 FreeMarker、JSP、Velocity;\n1. 强大的 Validator 后端校验功能;\n1. 功能齐全，拥有 struts2 绝大部分核心功能;\n1. 体积小仅 218K，且无第三方依赖。\n\n四、体系架构\n![JFinal 架构图](/css/images/jfinal.png)","slug":"2014-07-28-jfinal-lesson01","updated":"2016-09-13T11:53:09.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08wb0001c3x14amwibg0","content":"<blockquote>\n<p>JFinal 相关文章是个人刚毕业不久使用过的一个 Java 后台框架，感觉上手容易，搭建迅速，易于构建小型 Web 项目，以此对 JFinal 做个记录。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"JFinal-是-Java-极速-Web-开发的开源框架\"><a href=\"#JFinal-是-Java-极速-Web-开发的开源框架\" class=\"headerlink\" title=\"JFinal 是 Java 极速 Web 开发的开源框架\"></a>JFinal 是 Java 极速 Web 开发的开源框架</h3><p>一、优点：入手快、学习花费少、开发迅速、代码量很少、易扩展、RESTful风格（扩展性好）。<br>二、缺点：比较适合于小型WEB应用开发。<br>三、特点：</p>\n<ol>\n<li>MVC 架构、设计精巧;</li>\n<li>遵循 COC 原则、零配置、无附带xml文件;</li>\n<li>独创Db + Record模式、灵活便利;</li>\n<li>ActiveRecord 支持，使数据库开发极致快速;</li>\n<li>自动加载修改后的 java 文件，开发过程中无需重启 web server(如：tomcat);</li>\n<li>AOP 支持，拦截器配置灵活，功能强大;</li>\n<li>Plugin体系结构，扩展性强;</li>\n<li>多视图支持，支持 FreeMarker、JSP、Velocity;</li>\n<li>强大的 Validator 后端校验功能;</li>\n<li>功能齐全，拥有 struts2 绝大部分核心功能;</li>\n<li>体积小仅 218K，且无第三方依赖。</li>\n</ol>\n<p>四、体系架构<br><img src=\"/css/images/jfinal.png\" alt=\"JFinal 架构图\"></p>\n","excerpt":"<blockquote>\n<p>JFinal 相关文章是个人刚毕业不久使用过的一个 Java 后台框架，感觉上手容易，搭建迅速，易于构建小型 Web 项目，以此对 JFinal 做个记录。<br>","more":"</p>\n</blockquote>\n<h3 id=\"JFinal-是-Java-极速-Web-开发的开源框架\"><a href=\"#JFinal-是-Java-极速-Web-开发的开源框架\" class=\"headerlink\" title=\"JFinal 是 Java 极速 Web 开发的开源框架\"></a>JFinal 是 Java 极速 Web 开发的开源框架</h3><p>一、优点：入手快、学习花费少、开发迅速、代码量很少、易扩展、RESTful风格（扩展性好）。<br>二、缺点：比较适合于小型WEB应用开发。<br>三、特点：</p>\n<ol>\n<li>MVC 架构、设计精巧;</li>\n<li>遵循 COC 原则、零配置、无附带xml文件;</li>\n<li>独创Db + Record模式、灵活便利;</li>\n<li>ActiveRecord 支持，使数据库开发极致快速;</li>\n<li>自动加载修改后的 java 文件，开发过程中无需重启 web server(如：tomcat);</li>\n<li>AOP 支持，拦截器配置灵活，功能强大;</li>\n<li>Plugin体系结构，扩展性强;</li>\n<li>多视图支持，支持 FreeMarker、JSP、Velocity;</li>\n<li>强大的 Validator 后端校验功能;</li>\n<li>功能齐全，拥有 struts2 绝大部分核心功能;</li>\n<li>体积小仅 218K，且无第三方依赖。</li>\n</ol>\n<p>四、体系架构<br><img src=\"/css/images/jfinal.png\" alt=\"JFinal 架构图\"></p>"},{"layout":"post","title":"浅谈网站性能之前端性能优化","date":"2016-07-03T13:49:00.000Z","description":"前端性能优化","author":"acrens","published":1,"_content":"\n> 最近项目慢慢走上正轨，需求趋于平稳，这才想起需要对整站进行性能优化。经过一段时间的学习，结合现在项目的实际性能情况，发现确实有许多地方可以进行优化。于是就开始了我的前端性能优化之旅。以下内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。\n<!--more-->\n\n### 浅谈网站性能之前端性能优化\n性能优化的目的无非是减少用户流量消耗，提升用户首屏体验，提升用户访问速度，让用户专注内容本身。\n\n#### 前端性能优化\n\n* 减少 HTTP 请求数量\n\n基本原理：在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。而且不同浏览器对资源文件并发请求数量有限（[不同浏览器允许并发数](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。\n\n1. CSS Sprites：国内俗称 CSS 精灵，这是将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS background 属性来访问图片内容。这种方案同时还可以减少图片总字节数，节省命名词汇量（由命名多张图片文件变成一张，哈哈哈）。\n\n1. 合并 CSS 和 JS 文件：现在前端有很多工程化打包工具，如：grunt、gulp、webpack等。为了减少 HTTP 请求数量，可以通过这些工具再发布前将多个 CSS 或者 多个 JS 合并成一个文件。\n\n1. 采用 lazyLoad：俗称懒加载，可以控制网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。\n\n* 控制资源文件加载优先级\n\n基本原理：说到这里就需要知道浏览器加载 HTML 内容的原理，浏览器在加载 HTML 内容时，是将 HTML 内容从上至下依次解析，解析到 link 或者 script 标签就会加载 href 或者 src 对应链接内容，为了第一时间展示页面给用户，就需要将 CSS 提前加载，不要受 JS 加载影响。\n\n1. 遵循原则：主要文件放在 head 内部，次要文件放在 body 底部。一般情况下都是 CSS 在头部，JS 在底部。\n\n* 利用浏览器缓存\n\n基本原理：浏览器缓存分强缓存和协商缓存，他们是将网络资源存储在本地，等待下次请求该资源时，如果命中就不需要到服务器重新请求该资源，直接在本地读取该资源。\n\n1. 强缓存：在 web 服务器返回的响应中添加 Expires 和 Cache-Control Header。\n\n1. 协商缓存：通过【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 分别管理。\n\n* 使用 CDN\n\n基本原理：CDN的全称是Content Delivery Network，即[内容分发网络](http://zsvalue.com/201405/foundation-of-cdn-%E3%80%8Acdn%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3%E3%80%8Bnote/)。\n\n* 减少重排（Reflow）\n\n基本原理：重排是 DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性，这也是 Reflow 低效的原因。如果 Reflow 的过于频繁，CPU 使用率就会急剧上升。\n\n1. 减少 Reflow，如果需要在 DOM 操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 操作样式。\n\n* 减少 DOM 操作\n* 图标使用 IconFont 替换\n\n#### 花絮\n\n在开始提笔写这篇博客前就遇到了一个很棘手的问题，这篇博客标题叫什么，思考了一会，我心里冒出了三个答案：\n\n* 浅谈网站性能优化\n\n第一个标题网站性能优化，一看标题可以理解为是讲网站性能，而且是对网站进行优化，描述的是一种解决方案，然而网站性能包括的太多了，超出了我的知识范畴，所以放弃。\n\n* 浅谈网站性能之前端性能优化\n\n第二个标题正适我怀，答题概括了我本期博客内容，既有性能介绍，又有前端性能优化解决方案。\n\n* 浅谈前端性能优化\n\n第三个标题前端性能优化，心想这不就是我要写的内容嘛，等我写完内容发现，不对，我写的内容不仅仅是解决方案，好包括的其他内容，所以放弃。\n\n> 以上内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。","source":"_posts/2016-07-03-performance.md","raw":"---\nlayout: post\ntitle:  \"浅谈网站性能之前端性能优化\"\ndate:   2016-07-03 13:49:00 +0800\ncategories: 前端性能优化\ntags: \n- 性能优化\ndescription: \"前端性能优化\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 最近项目慢慢走上正轨，需求趋于平稳，这才想起需要对整站进行性能优化。经过一段时间的学习，结合现在项目的实际性能情况，发现确实有许多地方可以进行优化。于是就开始了我的前端性能优化之旅。以下内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。\n<!--more-->\n\n### 浅谈网站性能之前端性能优化\n性能优化的目的无非是减少用户流量消耗，提升用户首屏体验，提升用户访问速度，让用户专注内容本身。\n\n#### 前端性能优化\n\n* 减少 HTTP 请求数量\n\n基本原理：在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。而且不同浏览器对资源文件并发请求数量有限（[不同浏览器允许并发数](http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/)），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。\n\n1. CSS Sprites：国内俗称 CSS 精灵，这是将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS background 属性来访问图片内容。这种方案同时还可以减少图片总字节数，节省命名词汇量（由命名多张图片文件变成一张，哈哈哈）。\n\n1. 合并 CSS 和 JS 文件：现在前端有很多工程化打包工具，如：grunt、gulp、webpack等。为了减少 HTTP 请求数量，可以通过这些工具再发布前将多个 CSS 或者 多个 JS 合并成一个文件。\n\n1. 采用 lazyLoad：俗称懒加载，可以控制网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。\n\n* 控制资源文件加载优先级\n\n基本原理：说到这里就需要知道浏览器加载 HTML 内容的原理，浏览器在加载 HTML 内容时，是将 HTML 内容从上至下依次解析，解析到 link 或者 script 标签就会加载 href 或者 src 对应链接内容，为了第一时间展示页面给用户，就需要将 CSS 提前加载，不要受 JS 加载影响。\n\n1. 遵循原则：主要文件放在 head 内部，次要文件放在 body 底部。一般情况下都是 CSS 在头部，JS 在底部。\n\n* 利用浏览器缓存\n\n基本原理：浏览器缓存分强缓存和协商缓存，他们是将网络资源存储在本地，等待下次请求该资源时，如果命中就不需要到服务器重新请求该资源，直接在本地读取该资源。\n\n1. 强缓存：在 web 服务器返回的响应中添加 Expires 和 Cache-Control Header。\n\n1. 协商缓存：通过【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 分别管理。\n\n* 使用 CDN\n\n基本原理：CDN的全称是Content Delivery Network，即[内容分发网络](http://zsvalue.com/201405/foundation-of-cdn-%E3%80%8Acdn%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3%E3%80%8Bnote/)。\n\n* 减少重排（Reflow）\n\n基本原理：重排是 DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性，这也是 Reflow 低效的原因。如果 Reflow 的过于频繁，CPU 使用率就会急剧上升。\n\n1. 减少 Reflow，如果需要在 DOM 操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 操作样式。\n\n* 减少 DOM 操作\n* 图标使用 IconFont 替换\n\n#### 花絮\n\n在开始提笔写这篇博客前就遇到了一个很棘手的问题，这篇博客标题叫什么，思考了一会，我心里冒出了三个答案：\n\n* 浅谈网站性能优化\n\n第一个标题网站性能优化，一看标题可以理解为是讲网站性能，而且是对网站进行优化，描述的是一种解决方案，然而网站性能包括的太多了，超出了我的知识范畴，所以放弃。\n\n* 浅谈网站性能之前端性能优化\n\n第二个标题正适我怀，答题概括了我本期博客内容，既有性能介绍，又有前端性能优化解决方案。\n\n* 浅谈前端性能优化\n\n第三个标题前端性能优化，心想这不就是我要写的内容嘛，等我写完内容发现，不对，我写的内容不仅仅是解决方案，好包括的其他内容，所以放弃。\n\n> 以上内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。","slug":"2016-07-03-performance","updated":"2016-09-11T03:51:29.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08wn0004c3x1j2ayfeoc","content":"<blockquote>\n<p>最近项目慢慢走上正轨，需求趋于平稳，这才想起需要对整站进行性能优化。经过一段时间的学习，结合现在项目的实际性能情况，发现确实有许多地方可以进行优化。于是就开始了我的前端性能优化之旅。以下内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"浅谈网站性能之前端性能优化\"><a href=\"#浅谈网站性能之前端性能优化\" class=\"headerlink\" title=\"浅谈网站性能之前端性能优化\"></a>浅谈网站性能之前端性能优化</h3><p>性能优化的目的无非是减少用户流量消耗，提升用户首屏体验，提升用户访问速度，让用户专注内容本身。</p>\n<h4 id=\"前端性能优化\"><a href=\"#前端性能优化\" class=\"headerlink\" title=\"前端性能优化\"></a>前端性能优化</h4><ul>\n<li>减少 HTTP 请求数量</li>\n</ul>\n<p>基本原理：在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。而且不同浏览器对资源文件并发请求数量有限（<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\" target=\"_blank\" rel=\"external\">不同浏览器允许并发数</a>），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。</p>\n<ol>\n<li><p>CSS Sprites：国内俗称 CSS 精灵，这是将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS background 属性来访问图片内容。这种方案同时还可以减少图片总字节数，节省命名词汇量（由命名多张图片文件变成一张，哈哈哈）。</p>\n</li>\n<li><p>合并 CSS 和 JS 文件：现在前端有很多工程化打包工具，如：grunt、gulp、webpack等。为了减少 HTTP 请求数量，可以通过这些工具再发布前将多个 CSS 或者 多个 JS 合并成一个文件。</p>\n</li>\n<li><p>采用 lazyLoad：俗称懒加载，可以控制网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。</p>\n</li>\n</ol>\n<ul>\n<li>控制资源文件加载优先级</li>\n</ul>\n<p>基本原理：说到这里就需要知道浏览器加载 HTML 内容的原理，浏览器在加载 HTML 内容时，是将 HTML 内容从上至下依次解析，解析到 link 或者 script 标签就会加载 href 或者 src 对应链接内容，为了第一时间展示页面给用户，就需要将 CSS 提前加载，不要受 JS 加载影响。</p>\n<ol>\n<li>遵循原则：主要文件放在 head 内部，次要文件放在 body 底部。一般情况下都是 CSS 在头部，JS 在底部。</li>\n</ol>\n<ul>\n<li>利用浏览器缓存</li>\n</ul>\n<p>基本原理：浏览器缓存分强缓存和协商缓存，他们是将网络资源存储在本地，等待下次请求该资源时，如果命中就不需要到服务器重新请求该资源，直接在本地读取该资源。</p>\n<ol>\n<li><p>强缓存：在 web 服务器返回的响应中添加 Expires 和 Cache-Control Header。</p>\n</li>\n<li><p>协商缓存：通过【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 分别管理。</p>\n</li>\n</ol>\n<ul>\n<li>使用 CDN</li>\n</ul>\n<p>基本原理：CDN的全称是Content Delivery Network，即<a href=\"http://zsvalue.com/201405/foundation-of-cdn-%E3%80%8Acdn%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3%E3%80%8Bnote/\" target=\"_blank\" rel=\"external\">内容分发网络</a>。</p>\n<ul>\n<li>减少重排（Reflow）</li>\n</ul>\n<p>基本原理：重排是 DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性，这也是 Reflow 低效的原因。如果 Reflow 的过于频繁，CPU 使用率就会急剧上升。</p>\n<ol>\n<li>减少 Reflow，如果需要在 DOM 操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 操作样式。</li>\n</ol>\n<ul>\n<li>减少 DOM 操作</li>\n<li>图标使用 IconFont 替换</li>\n</ul>\n<h4 id=\"花絮\"><a href=\"#花絮\" class=\"headerlink\" title=\"花絮\"></a>花絮</h4><p>在开始提笔写这篇博客前就遇到了一个很棘手的问题，这篇博客标题叫什么，思考了一会，我心里冒出了三个答案：</p>\n<ul>\n<li>浅谈网站性能优化</li>\n</ul>\n<p>第一个标题网站性能优化，一看标题可以理解为是讲网站性能，而且是对网站进行优化，描述的是一种解决方案，然而网站性能包括的太多了，超出了我的知识范畴，所以放弃。</p>\n<ul>\n<li>浅谈网站性能之前端性能优化</li>\n</ul>\n<p>第二个标题正适我怀，答题概括了我本期博客内容，既有性能介绍，又有前端性能优化解决方案。</p>\n<ul>\n<li>浅谈前端性能优化</li>\n</ul>\n<p>第三个标题前端性能优化，心想这不就是我要写的内容嘛，等我写完内容发现，不对，我写的内容不仅仅是解决方案，好包括的其他内容，所以放弃。</p>\n<blockquote>\n<p>以上内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>最近项目慢慢走上正轨，需求趋于平稳，这才想起需要对整站进行性能优化。经过一段时间的学习，结合现在项目的实际性能情况，发现确实有许多地方可以进行优化。于是就开始了我的前端性能优化之旅。以下内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。<br>","more":"</p>\n</blockquote>\n<h3 id=\"浅谈网站性能之前端性能优化\"><a href=\"#浅谈网站性能之前端性能优化\" class=\"headerlink\" title=\"浅谈网站性能之前端性能优化\"></a>浅谈网站性能之前端性能优化</h3><p>性能优化的目的无非是减少用户流量消耗，提升用户首屏体验，提升用户访问速度，让用户专注内容本身。</p>\n<h4 id=\"前端性能优化\"><a href=\"#前端性能优化\" class=\"headerlink\" title=\"前端性能优化\"></a>前端性能优化</h4><ul>\n<li>减少 HTTP 请求数量</li>\n</ul>\n<p>基本原理：在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。而且不同浏览器对资源文件并发请求数量有限（<a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\">不同浏览器允许并发数</a>），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。</p>\n<ol>\n<li><p>CSS Sprites：国内俗称 CSS 精灵，这是将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS background 属性来访问图片内容。这种方案同时还可以减少图片总字节数，节省命名词汇量（由命名多张图片文件变成一张，哈哈哈）。</p>\n</li>\n<li><p>合并 CSS 和 JS 文件：现在前端有很多工程化打包工具，如：grunt、gulp、webpack等。为了减少 HTTP 请求数量，可以通过这些工具再发布前将多个 CSS 或者 多个 JS 合并成一个文件。</p>\n</li>\n<li><p>采用 lazyLoad：俗称懒加载，可以控制网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。</p>\n</li>\n</ol>\n<ul>\n<li>控制资源文件加载优先级</li>\n</ul>\n<p>基本原理：说到这里就需要知道浏览器加载 HTML 内容的原理，浏览器在加载 HTML 内容时，是将 HTML 内容从上至下依次解析，解析到 link 或者 script 标签就会加载 href 或者 src 对应链接内容，为了第一时间展示页面给用户，就需要将 CSS 提前加载，不要受 JS 加载影响。</p>\n<ol>\n<li>遵循原则：主要文件放在 head 内部，次要文件放在 body 底部。一般情况下都是 CSS 在头部，JS 在底部。</li>\n</ol>\n<ul>\n<li>利用浏览器缓存</li>\n</ul>\n<p>基本原理：浏览器缓存分强缓存和协商缓存，他们是将网络资源存储在本地，等待下次请求该资源时，如果命中就不需要到服务器重新请求该资源，直接在本地读取该资源。</p>\n<ol>\n<li><p>强缓存：在 web 服务器返回的响应中添加 Expires 和 Cache-Control Header。</p>\n</li>\n<li><p>协商缓存：通过【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 分别管理。</p>\n</li>\n</ol>\n<ul>\n<li>使用 CDN</li>\n</ul>\n<p>基本原理：CDN的全称是Content Delivery Network，即<a href=\"http://zsvalue.com/201405/foundation-of-cdn-%E3%80%8Acdn%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3%E3%80%8Bnote/\">内容分发网络</a>。</p>\n<ul>\n<li>减少重排（Reflow）</li>\n</ul>\n<p>基本原理：重排是 DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性，这也是 Reflow 低效的原因。如果 Reflow 的过于频繁，CPU 使用率就会急剧上升。</p>\n<ol>\n<li>减少 Reflow，如果需要在 DOM 操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 操作样式。</li>\n</ol>\n<ul>\n<li>减少 DOM 操作</li>\n<li>图标使用 IconFont 替换</li>\n</ul>\n<h4 id=\"花絮\"><a href=\"#花絮\" class=\"headerlink\" title=\"花絮\"></a>花絮</h4><p>在开始提笔写这篇博客前就遇到了一个很棘手的问题，这篇博客标题叫什么，思考了一会，我心里冒出了三个答案：</p>\n<ul>\n<li>浅谈网站性能优化</li>\n</ul>\n<p>第一个标题网站性能优化，一看标题可以理解为是讲网站性能，而且是对网站进行优化，描述的是一种解决方案，然而网站性能包括的太多了，超出了我的知识范畴，所以放弃。</p>\n<ul>\n<li>浅谈网站性能之前端性能优化</li>\n</ul>\n<p>第二个标题正适我怀，答题概括了我本期博客内容，既有性能介绍，又有前端性能优化解决方案。</p>\n<ul>\n<li>浅谈前端性能优化</li>\n</ul>\n<p>第三个标题前端性能优化，心想这不就是我要写的内容嘛，等我写完内容发现，不对，我写的内容不仅仅是解决方案，好包括的其他内容，所以放弃。</p>\n<blockquote>\n<p>以上内容仅为个人理解，如果本内容大家觉得哪里写的不对，望大家指出，供一起讨论。</p>\n</blockquote>"},{"layout":"post","title":"来，加入前端自动化单元测试","date":"2016-09-20T23:30:00.000Z","description":"前端自动化单元测试","author":"acrens","published":1,"_content":"\n> 最近闲来无事，开始摸索前端单元测试。一是不备之需，二是确实在实际项目中能够用到单元测试。这样可以提高开发效率，提升代码质量，完全可以单独对 JS 进行测试，无需页面，不依赖其他第三方。\n<!-- more -->\n\n### 为什么需要单元测试\n在这里首先需要知道单元测试的目的及结果：\n1. 使代码健壮，质量高，兼容各种临界点；\n2. 减少 QA 测试报告的反馈，提高自我影响力；\n3. 保证代码的整洁清晰。\n\n如果需要刨根问底追究为什么需要进行单元测试，那我们可以开始讲讲实际项目开发中遇到的一些问题：\n1. QA 不断反馈代码有 BUG （此时你正在投入的开发，然后被打扰...）；\n2. 代码出现 BUG，叠加代码修复 BUG（代码越来越难维护...）;\n3. 已经开发完成一个模块，但是没有页面提供调试测试；\n4. 你开发完成的功能，每次都有许多细小的 BUG（个人影响力下降...）。\n\n好了，列举了这么多原因，相信你也开始心虚了，回去继续搬砖检查检查代码有没有问题，如果你面色从容，大神，请手下我的膝盖。\n\n总结：单元测试的目的只有一个，用来确定是否适合使用\n### 如何进行单元测试\n如果明白了为什么要进行单元测试，相信你已经可以开始着手为自己的代码写一些单元测试代码。测试从字面理解就是检验，看对象是否达标，达标就是 pass，不达标就是 fail。产品有这样一个需求，如果结果是 3 达到目标且返回的为有效的数字类型才可以进行比较，下面看个栗子：\n``` javascript\n/**\n * 获取 a 除以 b 的结果\n * @param  {[Number]} a [数字]\n * @param  {[Number]} b [数字]\n * @return {[Number]}   [结果数字]\n */\nfunction division(a, b) {\n    return a / b;\n}\n\n// 测试代码\nfunction test() {\n    var result = division(6, 2);\n    \n    if (result === 3) {\n        console.log('pass');\n    } else {\n        console.log('fail');\n    }\n}\n```\n咋一看上面的代码没什么问题，可以满足产品的需求，但是问题来了，如果 b 为 0，这个模块就出现了 BUG，同时如果下次需要达到其他的值就算通过，那就得去修改测试代码，这样的测试代码本身也太不健全。于是乎有了下面的方式：\n``` javascript\n/**\n * 获取 a 除以 b 的结果\n * @param  {[Number]} a [数字]\n * @param  {[Number]} b [数字]\n * @return {[Number]}   [结果数字]\n */\nfunction division(a, b) {\n\n    if (b === 0) {\n        return 0;\n    } else {\n        return a / b;\n    }\n}\n\nfunction test(name, result, expect) {\n\n    if (result === expect) {\n        console.log(name + '-> pass');\n    } else {\n        console.log(name + '-> fail');\n    }\n}\ntest('normal number', division(6, 2), 3);\ntest('zero', division(6, 0), 0);\n```\n如果需要期望值为 10 就通过，那可以这样：\n``` javascript\ntest('normal number is 10', division(20, 2), 10);\n```\n### 单元测试环境搭建及代码示例\n但是随着前端迅速的发展，也出现了很多测试框架，下面我演示我在实际项目中使用的测试框架环境配置 karma + jasmine，对于 karma、jasmine 我就不介绍，网上一搜一大把介绍：\n1. 安装 node 环境\n依赖于 node 作为基础环境，安装完成在控制台运行下面命令查看是否安装成功。\n``` javascript\nnode -v\n```\n2. 新建目录并通过以下命令初始化项目配置 package.json\n``` javascript\nnpm init\n```\n    在 package.json scripts: {} 添加以下内容：\n``` javascript\n\"test\": \"karma start karma.conf.js\"\n```\n3. 依次安装测试框架\n``` javascript\nnpm install karma -g\nnpm install jasmine --save-dev\nnpm install karma-jasmine --save-dev\nnpm install karma-chrome-launcher --save-dev\nnpm install jasmine-core --save-dev\n```\n    或者一次性安装\n``` javascript\nnpm install karma -g\nnpm install jasmine karma-jasmine karma-chrome-launcher jasmine-core --save-dev\n```\n4. 运行以下命令新建 karma.conf.js（根目录下不是必须）\n``` javascript\nkarma init\n```\n    文件内容及说明：\n``` javascript\n/**\n * karma 自动化测试参数配置\n */\n\nmodule.exports = function(config) {\n    config.set({\n\n        // 基础路径，用在files，exclude属性上\n        basePath: '',\n\n        // 可用的测试框架: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine'],\n\n        // 需要加载到浏览器的文件列表\n        files: [\n            './src/**/*.js',\n            './test/unit/specs/*.spec.js'\n        ],\n\n        // 排除的文件列表\n        exclude: [\n            'karma.conf.js'\n        ],\n\n        // 在浏览器使用之前处理匹配的文件\n        // 可用的预处理: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {},\n\n        // 使用测试结果报告者\n        // 可能的值: \"dots\", \"progress\"\n        // 可用的报告者: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress'],\n\n        // web server port\n        port: 9876,\n\n        // 启用或禁用输出报告或者日志中的颜色\n        colors: true,\n\n        /**\n         * 日志等级\n         * 可能的值：\n         * config.LOG_DISABLE //不输出信息\n         * config.LOG_ERROR    //只输出错误信息\n         * config.LOG_WARN //只输出警告信息\n         * config.LOG_INFO //输出全部信息\n         * config.LOG_DEBUG //输出调试信息\n         */\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n        // 启用或禁用自动检测文件变化进行测试\n        autoWatch: true,\n\n        // 测试启动的浏览器\n        // 可用的浏览器: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['Chrome'],\n\n        // 开启或禁用持续集成模式\n        // 设置为true, Karma将打开浏览器，执行测试并最后退出\n        singleRun: false,\n\n        // 并发级别（启动的浏览器数）\n        concurrency: Infinity,\n\n        // 依赖插件\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-jasmine'\n        ]\n    })\n}\n```\n5. 新建源代码及测试代码目录，目录结构如下：\n``` javascript\nproject\n    - node_modules\n        - *(node 模块)\n    - src\n        - FQA\n            - index.js\n    - test\n        - unit\n            - specs\n                - *.spec.js\n    - karma.conf.js\n    - package.json\n```\n6. 测试代码\n    + index.js 源码\n    ``` javascript\n    /**\n         - test map method callback and parseInt param use\n         - @return {[Array]} [Array]\n         */\n        function checkMap() {\n            var nums = ['1', '2', '3'];\n        \n            return nums.map(parseInt);\n        }\n        \n        /**\n         - test null is Object，and common object is same\n         - @return {[Array]} [Array]\n         */\n        function typeofAndInstanceOf() {\n            var result = [];\n            result.push(typeof null);\n            result.push(null instanceof Object);\n        \n            return result;\n        }\n        \n        /**\n         - 检测操作符优先级\n         - @return {[string]} [返回字符串]\n         */\n        function checkOperators() {\n            var result = 'autoTest';\n            result = 'Value is ' + (result === 'autoTest') ? 'Something' : 'Nothing';\n        \n            return result;\n        }\n    ```\n    + fqa.spec.js 测试代码\n    ``` javascript\n        /**\n         - test index.js checkMap method\n         - detail:\n         -     parseInt(val, base), base is 2 ~ 36, otherwise value equal NaN.\n         */\n        describe('test map and callback parseInt', function() {\n            \n            it('a array call map', function() {\n                var nums = checkMap();\n                console.log(nums);\n        \n                expect([1, NaN, NaN]).toEqual(nums);\n            });\n        });\n        \n        /**\n         - test index.js typeofAndInstanceOf method\n         - detail:\n         -     typeof null qeual 'object', but null instanceof Object equal false, because null Constructor not Object.\n         */\n        describe('test null is object', function() {\n            \n            it('null object', function() {\n                var result = typeofAndInstanceOf();\n                console.log(result);\n        \n                expect(['object', false]).toEqual(result);\n            });\n        });\n        \n        /**\n         - test index.js checkOperators method\n         - detail:\n         -     compare operator precedence, + gt ?.\n         */\n        describe('test null is object', function() {\n        \n            it('test operator preceence', function() {\n                var result = checkOperators();\n                console.log(result);\n        \n                expect('Something').toEqual(result);\n            });\n        });\n    ```\n7. 运行 sudo npm run test 执行测试代码\n``` javascript\n\"scripts\": {\n    \"test\": \"karma start karma.conf.js\"\n}\n```\n8. 结果：\n![运行结果](/css/images/result.png)\n\n#### 解答\n1. npm run test 运行的实际上是 package.json 中配置的命令：\n``` javascript\n\"test\": \"karma start karma.conf.js\"\n```\n2. describe 定义测试模块，it 测试一个单元，describe 内部可以同时定义多个 it，因此可以做一系列的单元测试，测试方法详见[官方文档](http://jasmine.github.io/edge/introduction.html)。\n3. karma.conf.js 配置 files 设置测试时需要被加载的文件\n``` javascript\nfiles: [\n    './src/**/*.js',\n    './test/unit/specs/*.spec.js'\n]\n```\n#### 总结\n希望看完这篇文章，你也能够动起手来，开始编写一些单元测试代码，提高代码的质量，提升自己的周围影响力。本篇文章内容表述了实际项目开发中会遇到的问题，我们可以通过单元测试来减少这类问题的发生，以提高代码的安全性，代码的质量，从而保证产品的稳定性。","source":"_posts/2016-09-20-fe_unit_test.md","raw":"---\nlayout: post\ntitle:  \"来，加入前端自动化单元测试\"\ndate:   2016-09-20 23:30:00 +0800\ncategories: 自动化单元测试\ntags: \n- 单元测试\n- auto-unit-test\ndescription: \"前端自动化单元测试\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 最近闲来无事，开始摸索前端单元测试。一是不备之需，二是确实在实际项目中能够用到单元测试。这样可以提高开发效率，提升代码质量，完全可以单独对 JS 进行测试，无需页面，不依赖其他第三方。\n<!-- more -->\n\n### 为什么需要单元测试\n在这里首先需要知道单元测试的目的及结果：\n1. 使代码健壮，质量高，兼容各种临界点；\n2. 减少 QA 测试报告的反馈，提高自我影响力；\n3. 保证代码的整洁清晰。\n\n如果需要刨根问底追究为什么需要进行单元测试，那我们可以开始讲讲实际项目开发中遇到的一些问题：\n1. QA 不断反馈代码有 BUG （此时你正在投入的开发，然后被打扰...）；\n2. 代码出现 BUG，叠加代码修复 BUG（代码越来越难维护...）;\n3. 已经开发完成一个模块，但是没有页面提供调试测试；\n4. 你开发完成的功能，每次都有许多细小的 BUG（个人影响力下降...）。\n\n好了，列举了这么多原因，相信你也开始心虚了，回去继续搬砖检查检查代码有没有问题，如果你面色从容，大神，请手下我的膝盖。\n\n总结：单元测试的目的只有一个，用来确定是否适合使用\n### 如何进行单元测试\n如果明白了为什么要进行单元测试，相信你已经可以开始着手为自己的代码写一些单元测试代码。测试从字面理解就是检验，看对象是否达标，达标就是 pass，不达标就是 fail。产品有这样一个需求，如果结果是 3 达到目标且返回的为有效的数字类型才可以进行比较，下面看个栗子：\n``` javascript\n/**\n * 获取 a 除以 b 的结果\n * @param  {[Number]} a [数字]\n * @param  {[Number]} b [数字]\n * @return {[Number]}   [结果数字]\n */\nfunction division(a, b) {\n    return a / b;\n}\n\n// 测试代码\nfunction test() {\n    var result = division(6, 2);\n    \n    if (result === 3) {\n        console.log('pass');\n    } else {\n        console.log('fail');\n    }\n}\n```\n咋一看上面的代码没什么问题，可以满足产品的需求，但是问题来了，如果 b 为 0，这个模块就出现了 BUG，同时如果下次需要达到其他的值就算通过，那就得去修改测试代码，这样的测试代码本身也太不健全。于是乎有了下面的方式：\n``` javascript\n/**\n * 获取 a 除以 b 的结果\n * @param  {[Number]} a [数字]\n * @param  {[Number]} b [数字]\n * @return {[Number]}   [结果数字]\n */\nfunction division(a, b) {\n\n    if (b === 0) {\n        return 0;\n    } else {\n        return a / b;\n    }\n}\n\nfunction test(name, result, expect) {\n\n    if (result === expect) {\n        console.log(name + '-> pass');\n    } else {\n        console.log(name + '-> fail');\n    }\n}\ntest('normal number', division(6, 2), 3);\ntest('zero', division(6, 0), 0);\n```\n如果需要期望值为 10 就通过，那可以这样：\n``` javascript\ntest('normal number is 10', division(20, 2), 10);\n```\n### 单元测试环境搭建及代码示例\n但是随着前端迅速的发展，也出现了很多测试框架，下面我演示我在实际项目中使用的测试框架环境配置 karma + jasmine，对于 karma、jasmine 我就不介绍，网上一搜一大把介绍：\n1. 安装 node 环境\n依赖于 node 作为基础环境，安装完成在控制台运行下面命令查看是否安装成功。\n``` javascript\nnode -v\n```\n2. 新建目录并通过以下命令初始化项目配置 package.json\n``` javascript\nnpm init\n```\n    在 package.json scripts: {} 添加以下内容：\n``` javascript\n\"test\": \"karma start karma.conf.js\"\n```\n3. 依次安装测试框架\n``` javascript\nnpm install karma -g\nnpm install jasmine --save-dev\nnpm install karma-jasmine --save-dev\nnpm install karma-chrome-launcher --save-dev\nnpm install jasmine-core --save-dev\n```\n    或者一次性安装\n``` javascript\nnpm install karma -g\nnpm install jasmine karma-jasmine karma-chrome-launcher jasmine-core --save-dev\n```\n4. 运行以下命令新建 karma.conf.js（根目录下不是必须）\n``` javascript\nkarma init\n```\n    文件内容及说明：\n``` javascript\n/**\n * karma 自动化测试参数配置\n */\n\nmodule.exports = function(config) {\n    config.set({\n\n        // 基础路径，用在files，exclude属性上\n        basePath: '',\n\n        // 可用的测试框架: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine'],\n\n        // 需要加载到浏览器的文件列表\n        files: [\n            './src/**/*.js',\n            './test/unit/specs/*.spec.js'\n        ],\n\n        // 排除的文件列表\n        exclude: [\n            'karma.conf.js'\n        ],\n\n        // 在浏览器使用之前处理匹配的文件\n        // 可用的预处理: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {},\n\n        // 使用测试结果报告者\n        // 可能的值: \"dots\", \"progress\"\n        // 可用的报告者: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress'],\n\n        // web server port\n        port: 9876,\n\n        // 启用或禁用输出报告或者日志中的颜色\n        colors: true,\n\n        /**\n         * 日志等级\n         * 可能的值：\n         * config.LOG_DISABLE //不输出信息\n         * config.LOG_ERROR    //只输出错误信息\n         * config.LOG_WARN //只输出警告信息\n         * config.LOG_INFO //输出全部信息\n         * config.LOG_DEBUG //输出调试信息\n         */\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n        // 启用或禁用自动检测文件变化进行测试\n        autoWatch: true,\n\n        // 测试启动的浏览器\n        // 可用的浏览器: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['Chrome'],\n\n        // 开启或禁用持续集成模式\n        // 设置为true, Karma将打开浏览器，执行测试并最后退出\n        singleRun: false,\n\n        // 并发级别（启动的浏览器数）\n        concurrency: Infinity,\n\n        // 依赖插件\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-jasmine'\n        ]\n    })\n}\n```\n5. 新建源代码及测试代码目录，目录结构如下：\n``` javascript\nproject\n    - node_modules\n        - *(node 模块)\n    - src\n        - FQA\n            - index.js\n    - test\n        - unit\n            - specs\n                - *.spec.js\n    - karma.conf.js\n    - package.json\n```\n6. 测试代码\n    + index.js 源码\n    ``` javascript\n    /**\n         - test map method callback and parseInt param use\n         - @return {[Array]} [Array]\n         */\n        function checkMap() {\n            var nums = ['1', '2', '3'];\n        \n            return nums.map(parseInt);\n        }\n        \n        /**\n         - test null is Object，and common object is same\n         - @return {[Array]} [Array]\n         */\n        function typeofAndInstanceOf() {\n            var result = [];\n            result.push(typeof null);\n            result.push(null instanceof Object);\n        \n            return result;\n        }\n        \n        /**\n         - 检测操作符优先级\n         - @return {[string]} [返回字符串]\n         */\n        function checkOperators() {\n            var result = 'autoTest';\n            result = 'Value is ' + (result === 'autoTest') ? 'Something' : 'Nothing';\n        \n            return result;\n        }\n    ```\n    + fqa.spec.js 测试代码\n    ``` javascript\n        /**\n         - test index.js checkMap method\n         - detail:\n         -     parseInt(val, base), base is 2 ~ 36, otherwise value equal NaN.\n         */\n        describe('test map and callback parseInt', function() {\n            \n            it('a array call map', function() {\n                var nums = checkMap();\n                console.log(nums);\n        \n                expect([1, NaN, NaN]).toEqual(nums);\n            });\n        });\n        \n        /**\n         - test index.js typeofAndInstanceOf method\n         - detail:\n         -     typeof null qeual 'object', but null instanceof Object equal false, because null Constructor not Object.\n         */\n        describe('test null is object', function() {\n            \n            it('null object', function() {\n                var result = typeofAndInstanceOf();\n                console.log(result);\n        \n                expect(['object', false]).toEqual(result);\n            });\n        });\n        \n        /**\n         - test index.js checkOperators method\n         - detail:\n         -     compare operator precedence, + gt ?.\n         */\n        describe('test null is object', function() {\n        \n            it('test operator preceence', function() {\n                var result = checkOperators();\n                console.log(result);\n        \n                expect('Something').toEqual(result);\n            });\n        });\n    ```\n7. 运行 sudo npm run test 执行测试代码\n``` javascript\n\"scripts\": {\n    \"test\": \"karma start karma.conf.js\"\n}\n```\n8. 结果：\n![运行结果](/css/images/result.png)\n\n#### 解答\n1. npm run test 运行的实际上是 package.json 中配置的命令：\n``` javascript\n\"test\": \"karma start karma.conf.js\"\n```\n2. describe 定义测试模块，it 测试一个单元，describe 内部可以同时定义多个 it，因此可以做一系列的单元测试，测试方法详见[官方文档](http://jasmine.github.io/edge/introduction.html)。\n3. karma.conf.js 配置 files 设置测试时需要被加载的文件\n``` javascript\nfiles: [\n    './src/**/*.js',\n    './test/unit/specs/*.spec.js'\n]\n```\n#### 总结\n希望看完这篇文章，你也能够动起手来，开始编写一些单元测试代码，提高代码的质量，提升自己的周围影响力。本篇文章内容表述了实际项目开发中会遇到的问题，我们可以通过单元测试来减少这类问题的发生，以提高代码的安全性，代码的质量，从而保证产品的稳定性。","slug":"2016-09-20-fe_unit_test","updated":"2016-09-20T15:34:33.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08wr0005c3x1j3o1tsso","content":"<blockquote>\n<p>最近闲来无事，开始摸索前端单元测试。一是不备之需，二是确实在实际项目中能够用到单元测试。这样可以提高开发效率，提升代码质量，完全可以单独对 JS 进行测试，无需页面，不依赖其他第三方。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"为什么需要单元测试\"><a href=\"#为什么需要单元测试\" class=\"headerlink\" title=\"为什么需要单元测试\"></a>为什么需要单元测试</h3><p>在这里首先需要知道单元测试的目的及结果：</p>\n<ol>\n<li>使代码健壮，质量高，兼容各种临界点；</li>\n<li>减少 QA 测试报告的反馈，提高自我影响力；</li>\n<li>保证代码的整洁清晰。</li>\n</ol>\n<p>如果需要刨根问底追究为什么需要进行单元测试，那我们可以开始讲讲实际项目开发中遇到的一些问题：</p>\n<ol>\n<li>QA 不断反馈代码有 BUG （此时你正在投入的开发，然后被打扰…）；</li>\n<li>代码出现 BUG，叠加代码修复 BUG（代码越来越难维护…）;</li>\n<li>已经开发完成一个模块，但是没有页面提供调试测试；</li>\n<li>你开发完成的功能，每次都有许多细小的 BUG（个人影响力下降…）。</li>\n</ol>\n<p>好了，列举了这么多原因，相信你也开始心虚了，回去继续搬砖检查检查代码有没有问题，如果你面色从容，大神，请手下我的膝盖。</p>\n<p>总结：单元测试的目的只有一个，用来确定是否适合使用</p>\n<h3 id=\"如何进行单元测试\"><a href=\"#如何进行单元测试\" class=\"headerlink\" title=\"如何进行单元测试\"></a>如何进行单元测试</h3><p>如果明白了为什么要进行单元测试，相信你已经可以开始着手为自己的代码写一些单元测试代码。测试从字面理解就是检验，看对象是否达标，达标就是 pass，不达标就是 fail。产品有这样一个需求，如果结果是 3 达到目标且返回的为有效的数字类型才可以进行比较，下面看个栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取 a 除以 b 的结果</div><div class=\"line\"> * @param  &#123;[Number]&#125; a [数字]</div><div class=\"line\"> * @param  &#123;[Number]&#125; b [数字]</div><div class=\"line\"> * @return &#123;[Number]&#125;   [结果数字]</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">division</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a / b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = division(<span class=\"number\">6</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (result === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'pass'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>咋一看上面的代码没什么问题，可以满足产品的需求，但是问题来了，如果 b 为 0，这个模块就出现了 BUG，同时如果下次需要达到其他的值就算通过，那就得去修改测试代码，这样的测试代码本身也太不健全。于是乎有了下面的方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取 a 除以 b 的结果</div><div class=\"line\"> * @param  &#123;[Number]&#125; a [数字]</div><div class=\"line\"> * @param  &#123;[Number]&#125; b [数字]</div><div class=\"line\"> * @return &#123;[Number]&#125;   [结果数字]</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">division</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (b === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a / b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, result, expect</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (result === expect) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'-&gt; pass'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'-&gt; fail'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">'normal number'</span>, division(<span class=\"number\">6</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>);</div><div class=\"line\">test(<span class=\"string\">'zero'</span>, division(<span class=\"number\">6</span>, <span class=\"number\">0</span>), <span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>如果需要期望值为 10 就通过，那可以这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">'normal number is 10'</span>, division(<span class=\"number\">20</span>, <span class=\"number\">2</span>), <span class=\"number\">10</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"单元测试环境搭建及代码示例\"><a href=\"#单元测试环境搭建及代码示例\" class=\"headerlink\" title=\"单元测试环境搭建及代码示例\"></a>单元测试环境搭建及代码示例</h3><p>但是随着前端迅速的发展，也出现了很多测试框架，下面我演示我在实际项目中使用的测试框架环境配置 karma + jasmine，对于 karma、jasmine 我就不介绍，网上一搜一大把介绍：</p>\n<ol>\n<li><p>安装 node 环境<br>依赖于 node 作为基础环境，安装完成在控制台运行下面命令查看是否安装成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建目录并通过以下命令初始化项目配置 package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p> 在 package.json scripts: {} 添加以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>依次安装测试框架</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma -g</div><div class=\"line\">npm install jasmine --save-dev</div><div class=\"line\">npm install karma-jasmine --save-dev</div><div class=\"line\">npm install karma-chrome-launcher --save-dev</div><div class=\"line\">npm install jasmine-core --save-dev</div></pre></td></tr></table></figure>\n<p> 或者一次性安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma -g</div><div class=\"line\">npm install jasmine karma-jasmine karma-chrome-launcher jasmine-core --save-dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行以下命令新建 karma.conf.js（根目录下不是必须）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure>\n<p> 文件内容及说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * karma 自动化测试参数配置</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 基础路径，用在files，exclude属性上</span></div><div class=\"line\">        basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 可用的测试框架: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">        frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 需要加载到浏览器的文件列表</span></div><div class=\"line\">        files: [</div><div class=\"line\">            <span class=\"string\">'./src/**/*.js'</span>,</div><div class=\"line\">            <span class=\"string\">'./test/unit/specs/*.spec.js'</span></div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 排除的文件列表</span></div><div class=\"line\">        exclude: [</div><div class=\"line\">            <span class=\"string\">'karma.conf.js'</span></div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 在浏览器使用之前处理匹配的文件</span></div><div class=\"line\">        <span class=\"comment\">// 可用的预处理: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">        preprocessors: &#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 使用测试结果报告者</span></div><div class=\"line\">        <span class=\"comment\">// 可能的值: \"dots\", \"progress\"</span></div><div class=\"line\">        <span class=\"comment\">// 可用的报告者: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">        reporters: [<span class=\"string\">'progress'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// web server port</span></div><div class=\"line\">        port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 启用或禁用输出报告或者日志中的颜色</span></div><div class=\"line\">        colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 日志等级</div><div class=\"line\">         * 可能的值：</div><div class=\"line\">         * config.LOG_DISABLE //不输出信息</div><div class=\"line\">         * config.LOG_ERROR    //只输出错误信息</div><div class=\"line\">         * config.LOG_WARN //只输出警告信息</div><div class=\"line\">         * config.LOG_INFO //输出全部信息</div><div class=\"line\">         * config.LOG_DEBUG //输出调试信息</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">        logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 启用或禁用自动检测文件变化进行测试</span></div><div class=\"line\">        autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 测试启动的浏览器</span></div><div class=\"line\">        <span class=\"comment\">// 可用的浏览器: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">        browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 开启或禁用持续集成模式</span></div><div class=\"line\">        <span class=\"comment\">// 设置为true, Karma将打开浏览器，执行测试并最后退出</span></div><div class=\"line\">        singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 并发级别（启动的浏览器数）</span></div><div class=\"line\">        concurrency: <span class=\"literal\">Infinity</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 依赖插件</span></div><div class=\"line\">        plugins: [</div><div class=\"line\">            <span class=\"string\">'karma-chrome-launcher'</span>,</div><div class=\"line\">            <span class=\"string\">'karma-jasmine'</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建源代码及测试代码目录，目录结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">project</div><div class=\"line\">    - node_modules</div><div class=\"line\">        - *(node 模块)</div><div class=\"line\">    - src</div><div class=\"line\">        - FQA</div><div class=\"line\">            - index.js</div><div class=\"line\">    - test</div><div class=\"line\">        - unit</div><div class=\"line\">            - specs</div><div class=\"line\">                - *.spec.js</div><div class=\"line\">    - karma.conf.js</div><div class=\"line\">    - package.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试代码</p>\n<ul>\n<li><p>index.js 源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     - test map method callback and parseInt param use</div><div class=\"line\">     - @return &#123;[Array]&#125; [Array]</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nums = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>];</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> nums.map(<span class=\"built_in\">parseInt</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     - test null is Object，and common object is same</div><div class=\"line\">     - @return &#123;[Array]&#125; [Array]</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeofAndInstanceOf</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">        result.push(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);</div><div class=\"line\">        result.push(<span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     - 检测操作符优先级</div><div class=\"line\">     - @return &#123;[string]&#125; [返回字符串]</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOperators</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"string\">'autoTest'</span>;</div><div class=\"line\">        result = <span class=\"string\">'Value is '</span> + (result === <span class=\"string\">'autoTest'</span>) ? <span class=\"string\">'Something'</span> : <span class=\"string\">'Nothing'</span>;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>fqa.spec.js 测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> - test index.js checkMap method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     parseInt(val, base), base is 2 ~ 36, otherwise value equal NaN.</div><div class=\"line\"> */</div><div class=\"line\">describe(<span class=\"string\">'test map and callback parseInt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    it(<span class=\"string\">'a array call map'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nums = checkMap();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(nums);</div><div class=\"line\"></div><div class=\"line\">        expect([<span class=\"number\">1</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>]).toEqual(nums);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> - test index.js typeofAndInstanceOf method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     typeof null qeual 'object', but null instanceof Object equal false, because null Constructor not Object.</div><div class=\"line\"> */</div><div class=\"line\">describe(<span class=\"string\">'test null is object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    it(<span class=\"string\">'null object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = typeofAndInstanceOf();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\"></div><div class=\"line\">        expect([<span class=\"string\">'object'</span>, <span class=\"literal\">false</span>]).toEqual(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> - test index.js checkOperators method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     compare operator precedence, + gt ?.</div><div class=\"line\"> */</div><div class=\"line\">describe(<span class=\"string\">'test null is object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'test operator preceence'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = checkOperators();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\"></div><div class=\"line\">        expect(<span class=\"string\">'Something'</span>).toEqual(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行 sudo npm run test 执行测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果：<br><img src=\"/css/images/result.png\" alt=\"运行结果\"></p>\n</li>\n</ol>\n<h4 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h4><ol>\n<li><p>npm run test 运行的实际上是 package.json 中配置的命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>describe 定义测试模块，it 测试一个单元，describe 内部可以同时定义多个 it，因此可以做一系列的单元测试，测试方法详见<a href=\"http://jasmine.github.io/edge/introduction.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n</li>\n<li>karma.conf.js 配置 files 设置测试时需要被加载的文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">files: [</div><div class=\"line\">    <span class=\"string\">'./src/**/*.js'</span>,</div><div class=\"line\">    <span class=\"string\">'./test/unit/specs/*.spec.js'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>希望看完这篇文章，你也能够动起手来，开始编写一些单元测试代码，提高代码的质量，提升自己的周围影响力。本篇文章内容表述了实际项目开发中会遇到的问题，我们可以通过单元测试来减少这类问题的发生，以提高代码的安全性，代码的质量，从而保证产品的稳定性。</p>\n","excerpt":"<blockquote>\n<p>最近闲来无事，开始摸索前端单元测试。一是不备之需，二是确实在实际项目中能够用到单元测试。这样可以提高开发效率，提升代码质量，完全可以单独对 JS 进行测试，无需页面，不依赖其他第三方。<br>","more":"</p>\n</blockquote>\n<h3 id=\"为什么需要单元测试\"><a href=\"#为什么需要单元测试\" class=\"headerlink\" title=\"为什么需要单元测试\"></a>为什么需要单元测试</h3><p>在这里首先需要知道单元测试的目的及结果：</p>\n<ol>\n<li>使代码健壮，质量高，兼容各种临界点；</li>\n<li>减少 QA 测试报告的反馈，提高自我影响力；</li>\n<li>保证代码的整洁清晰。</li>\n</ol>\n<p>如果需要刨根问底追究为什么需要进行单元测试，那我们可以开始讲讲实际项目开发中遇到的一些问题：</p>\n<ol>\n<li>QA 不断反馈代码有 BUG （此时你正在投入的开发，然后被打扰…）；</li>\n<li>代码出现 BUG，叠加代码修复 BUG（代码越来越难维护…）;</li>\n<li>已经开发完成一个模块，但是没有页面提供调试测试；</li>\n<li>你开发完成的功能，每次都有许多细小的 BUG（个人影响力下降…）。</li>\n</ol>\n<p>好了，列举了这么多原因，相信你也开始心虚了，回去继续搬砖检查检查代码有没有问题，如果你面色从容，大神，请手下我的膝盖。</p>\n<p>总结：单元测试的目的只有一个，用来确定是否适合使用</p>\n<h3 id=\"如何进行单元测试\"><a href=\"#如何进行单元测试\" class=\"headerlink\" title=\"如何进行单元测试\"></a>如何进行单元测试</h3><p>如果明白了为什么要进行单元测试，相信你已经可以开始着手为自己的代码写一些单元测试代码。测试从字面理解就是检验，看对象是否达标，达标就是 pass，不达标就是 fail。产品有这样一个需求，如果结果是 3 达到目标且返回的为有效的数字类型才可以进行比较，下面看个栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取 a 除以 b 的结果</div><div class=\"line\"> * @param  &#123;[Number]&#125; a [数字]</div><div class=\"line\"> * @param  &#123;[Number]&#125; b [数字]</div><div class=\"line\"> * @return &#123;[Number]&#125;   [结果数字]</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">division</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a / b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = division(<span class=\"number\">6</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (result === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'pass'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>咋一看上面的代码没什么问题，可以满足产品的需求，但是问题来了，如果 b 为 0，这个模块就出现了 BUG，同时如果下次需要达到其他的值就算通过，那就得去修改测试代码，这样的测试代码本身也太不健全。于是乎有了下面的方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取 a 除以 b 的结果</div><div class=\"line\"> * @param  &#123;[Number]&#125; a [数字]</div><div class=\"line\"> * @param  &#123;[Number]&#125; b [数字]</div><div class=\"line\"> * @return &#123;[Number]&#125;   [结果数字]</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">division</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (b === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a / b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name, result, expect</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (result === expect) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'-&gt; pass'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(name + <span class=\"string\">'-&gt; fail'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">'normal number'</span>, division(<span class=\"number\">6</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>);</div><div class=\"line\">test(<span class=\"string\">'zero'</span>, division(<span class=\"number\">6</span>, <span class=\"number\">0</span>), <span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<p>如果需要期望值为 10 就通过，那可以这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">'normal number is 10'</span>, division(<span class=\"number\">20</span>, <span class=\"number\">2</span>), <span class=\"number\">10</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"单元测试环境搭建及代码示例\"><a href=\"#单元测试环境搭建及代码示例\" class=\"headerlink\" title=\"单元测试环境搭建及代码示例\"></a>单元测试环境搭建及代码示例</h3><p>但是随着前端迅速的发展，也出现了很多测试框架，下面我演示我在实际项目中使用的测试框架环境配置 karma + jasmine，对于 karma、jasmine 我就不介绍，网上一搜一大把介绍：</p>\n<ol>\n<li><p>安装 node 环境<br>依赖于 node 作为基础环境，安装完成在控制台运行下面命令查看是否安装成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建目录并通过以下命令初始化项目配置 package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p> 在 package.json scripts: {} 添加以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>依次安装测试框架</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma -g</div><div class=\"line\">npm install jasmine --save-dev</div><div class=\"line\">npm install karma-jasmine --save-dev</div><div class=\"line\">npm install karma-chrome-launcher --save-dev</div><div class=\"line\">npm install jasmine-core --save-dev</div></pre></td></tr></table></figure>\n<p> 或者一次性安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma -g</div><div class=\"line\">npm install jasmine karma-jasmine karma-chrome-launcher jasmine-core --save-dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行以下命令新建 karma.conf.js（根目录下不是必须）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">karma init</div></pre></td></tr></table></figure>\n<p> 文件内容及说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * karma 自动化测试参数配置</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 基础路径，用在files，exclude属性上</span></div><div class=\"line\">        basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 可用的测试框架: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">        frameworks: [<span class=\"string\">'jasmine'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 需要加载到浏览器的文件列表</span></div><div class=\"line\">        files: [</div><div class=\"line\">            <span class=\"string\">'./src/**/*.js'</span>,</div><div class=\"line\">            <span class=\"string\">'./test/unit/specs/*.spec.js'</span></div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 排除的文件列表</span></div><div class=\"line\">        exclude: [</div><div class=\"line\">            <span class=\"string\">'karma.conf.js'</span></div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 在浏览器使用之前处理匹配的文件</span></div><div class=\"line\">        <span class=\"comment\">// 可用的预处理: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">        preprocessors: &#123;&#125;,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 使用测试结果报告者</span></div><div class=\"line\">        <span class=\"comment\">// 可能的值: \"dots\", \"progress\"</span></div><div class=\"line\">        <span class=\"comment\">// 可用的报告者: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">        reporters: [<span class=\"string\">'progress'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// web server port</span></div><div class=\"line\">        port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 启用或禁用输出报告或者日志中的颜色</span></div><div class=\"line\">        colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 日志等级</div><div class=\"line\">         * 可能的值：</div><div class=\"line\">         * config.LOG_DISABLE //不输出信息</div><div class=\"line\">         * config.LOG_ERROR    //只输出错误信息</div><div class=\"line\">         * config.LOG_WARN //只输出警告信息</div><div class=\"line\">         * config.LOG_INFO //输出全部信息</div><div class=\"line\">         * config.LOG_DEBUG //输出调试信息</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">        logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 启用或禁用自动检测文件变化进行测试</span></div><div class=\"line\">        autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 测试启动的浏览器</span></div><div class=\"line\">        <span class=\"comment\">// 可用的浏览器: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">        browsers: [<span class=\"string\">'Chrome'</span>],</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 开启或禁用持续集成模式</span></div><div class=\"line\">        <span class=\"comment\">// 设置为true, Karma将打开浏览器，执行测试并最后退出</span></div><div class=\"line\">        singleRun: <span class=\"literal\">false</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 并发级别（启动的浏览器数）</span></div><div class=\"line\">        concurrency: <span class=\"literal\">Infinity</span>,</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 依赖插件</span></div><div class=\"line\">        plugins: [</div><div class=\"line\">            <span class=\"string\">'karma-chrome-launcher'</span>,</div><div class=\"line\">            <span class=\"string\">'karma-jasmine'</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建源代码及测试代码目录，目录结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">project</div><div class=\"line\">    - node_modules</div><div class=\"line\">        - *(node 模块)</div><div class=\"line\">    - src</div><div class=\"line\">        - FQA</div><div class=\"line\">            - index.js</div><div class=\"line\">    - test</div><div class=\"line\">        - unit</div><div class=\"line\">            - specs</div><div class=\"line\">                - *.spec.js</div><div class=\"line\">    - karma.conf.js</div><div class=\"line\">    - package.json</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试代码</p>\n<ul>\n<li><p>index.js 源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     - test map method callback and parseInt param use</div><div class=\"line\">     - @return &#123;[Array]&#125; [Array]</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nums = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>];</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> nums.map(<span class=\"built_in\">parseInt</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     - test null is Object，and common object is same</div><div class=\"line\">     - @return &#123;[Array]&#125; [Array]</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeofAndInstanceOf</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">        result.push(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);</div><div class=\"line\">        result.push(<span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     - 检测操作符优先级</div><div class=\"line\">     - @return &#123;[string]&#125; [返回字符串]</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkOperators</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"string\">'autoTest'</span>;</div><div class=\"line\">        result = <span class=\"string\">'Value is '</span> + (result === <span class=\"string\">'autoTest'</span>) ? <span class=\"string\">'Something'</span> : <span class=\"string\">'Nothing'</span>;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>fqa.spec.js 测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> - test index.js checkMap method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     parseInt(val, base), base is 2 ~ 36, otherwise value equal NaN.</div><div class=\"line\"> */</span></div><div class=\"line\">describe(<span class=\"string\">'test map and callback parseInt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    it(<span class=\"string\">'a array call map'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nums = checkMap();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(nums);</div><div class=\"line\"></div><div class=\"line\">        expect([<span class=\"number\">1</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>]).toEqual(nums);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> - test index.js typeofAndInstanceOf method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     typeof null qeual 'object', but null instanceof Object equal false, because null Constructor not Object.</div><div class=\"line\"> */</span></div><div class=\"line\">describe(<span class=\"string\">'test null is object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    it(<span class=\"string\">'null object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = typeofAndInstanceOf();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\"></div><div class=\"line\">        expect([<span class=\"string\">'object'</span>, <span class=\"literal\">false</span>]).toEqual(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> - test index.js checkOperators method</div><div class=\"line\"> - detail:</div><div class=\"line\"> -     compare operator precedence, + gt ?.</div><div class=\"line\"> */</span></div><div class=\"line\">describe(<span class=\"string\">'test null is object'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    it(<span class=\"string\">'test operator preceence'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = checkOperators();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\"></div><div class=\"line\">        expect(<span class=\"string\">'Something'</span>).toEqual(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运行 sudo npm run test 执行测试代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果：<br><img src=\"/css/images/result.png\" alt=\"运行结果\"></p>\n</li>\n</ol>\n<h4 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h4><ol>\n<li><p>npm run test 运行的实际上是 package.json 中配置的命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start karma.conf.js\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>describe 定义测试模块，it 测试一个单元，describe 内部可以同时定义多个 it，因此可以做一系列的单元测试，测试方法详见<a href=\"http://jasmine.github.io/edge/introduction.html\">官方文档</a>。</p>\n</li>\n<li>karma.conf.js 配置 files 设置测试时需要被加载的文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">files: [</div><div class=\"line\">    <span class=\"string\">'./src/**/*.js'</span>,</div><div class=\"line\">    <span class=\"string\">'./test/unit/specs/*.spec.js'</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>希望看完这篇文章，你也能够动起手来，开始编写一些单元测试代码，提高代码的质量，提升自己的周围影响力。本篇文章内容表述了实际项目开发中会遇到的问题，我们可以通过单元测试来减少这类问题的发生，以提高代码的安全性，代码的质量，从而保证产品的稳定性。</p>"},{"layout":"post","title":"关于组建一支精良团队的构想","date":"2016-11-29T21:38:00.000Z","description":"如何打造一支精良团队的构想","author":"acrens","published":1,"_content":"\n> 今年双十一也过去一段时间，在双十一的大潮中，产生了很多匪夷所思的大数据。天猫的 1207 亿元成交额。在这些大数据的背后，有多少团队在为之付出，又有多少人为之倾尽全力。双十一过后的几周，我不断在订阅号里看见双十一带来的连锁反应，各种技术文章，看了让人心动。但是我又因此思考，如何在这场战争后继续保持一个团队的稳定及继续勇往向前冲的态度。那就是\"打造一支精良的团队\"。\n<!-- more -->\n\n#### 认识一致\n我们可以从技术角度去要求每位团队成员必须达到指定的一个技术体系，也就是解决现已有产品需求的最基本，也是最完善的能力。这样可以节约团队资源，无缝隙的快速接入一个产品。\n\n既然聊到了\"技术体系\"这个词，下面聊聊他的作用及范围，由于本人是从事前端开发工作，可能更了解前端体系，这里就根据我浅陋的了解说说我对\"技术体系\"的想法。\n\n> 我很认同的一句话：技术体系归根结底是要围绕业务发展、团队规模和团队特点量身打造的，主要目的是为了提升团队整体的研发效率，确保线上的质量和稳定性。\n\n开发团队的任务就是完成产品业务，而在完成业务的同时要考虑的东西包括：资源、投入、质量、稳定等等。那前端团队如何通过自身特点去解决这些问题？\n\n- 流程规范\n    1. 代码规范，如遵循 [airbnb](https://github.com/airbnb/javascript) javascript 规范；\n    2. git 版本管理，如遵循 [gitflow](http://www.ituring.com.cn/article/56870) 分支规范；\n    3. 部署规范，分开发、试用、正式三个环境，多机备份，等等。\n\n- 技术工具栈\n    1. 技术栈说到底应该是没有限制的，因为这需要根据开发工程师及项目实际业务需求做出最合适的技术选型。但是至少得学会一种最近流行的框架，有备无患，这也是作为一个前端开发者的必备素养。但不管怎么样，你至少会 [vue 全家桶](https://vuefe.cn/v2/guide/)、[react 全家桶](http://reactjs.cn/react/docs/getting-started-zh-CN.html)、[angular](http://www.apjs.net/) 中的一种吧？如果您是一个移动端爱好的前端开发者，你或许还可以学习[ Weex（Vue Native）](https://alibaba.github.io/weex/)者 [React Native](http://reactnative.cn/docs/next/getting-started.html)，站在前端开发的角度开发多端兼容的 App。write less do more。\n\n- 构建工具栈\n    1. 构建工具如同技术工具栈，但相比又更加主观，开发者可以根据自行需求选用合适的构建工具，不管是选择 [yeoman](http://yeoman.io/authoring/index.html)、[gulp](http://www.gulpjs.com.cn/)、[webpack](https://webpack.vuefe.cn/configuration/index/)、[grunt](http://www.gruntjs.net/)、[sass](http://sass.bootcss.com/docs/sass-reference/)、[less](http://less.bootcss.com/)、[babel](http://babeljs.cn/)、[npm](https://www.npmjs.com/)、[yarn](https://yarnpkg.com/) 里面的一个或者多种的组合，最主要的还是要切合团队配合及实际项目需要。\n\n- 测试工具栈\n    1. 测试工具可以选用比较常用的 [Mocha](http://mochajs.org/)、[Chai](http://chaijs.com/)、[Karma](https://karma-runner.github.io/1.0/intro/installation.html)、[intern](https://theintern.github.io/)、[jasmine](http://jasmine.github.io/) ，对于前端代码而言，进行前端代码自动化测试是保证代码的质量和健壮性的一项可行方案。\n\n- 部署流程及部署平台\n    1. 部署流程是控制上线资源前的最后一道规范限制，部署也需要运维及 DB 严格把控（当然这里可能是指严格把控后端操作数据库）。\n    2. 部署平台是发布资源的最后一道工序，可能按钮一点，新资源就全部一键发布上线。但是为了提高前端团队发布效率，将发布系统与 git、svn 等版本控制系统结合起来构建一个发布资源平台，这样可以对发布资源做很多事情，多成员各自发布各自的互不影响，唯有管理员可以一键发布所有相关人员修改的代码，这样把发布代码不一致性降至最低。\n\n- 监控体系\n    1. 监控系统也是我最近很感兴趣的一件事情，淘宝的 [JSTracker](http://taobaofed.org/blog/2015/10/28/jstracker-how-to-collect-data/)、腾讯的 [badjs-report](https://github.com/BetterJS/badjs-report) 都给了我很好的参考。而监控体系不仅仅局限于此，监控体系本身可以包含：日志上报、性能监控及错误监控等。这样能够第一时间让相关人员知道系统本身存在的问题并第一时间通知开发者，且第一时间修复减少因为此问题带来的损失。\n\n#### 想法各异\n在远古，摩擦升温是起火的一种方式。我希望我的团队每个人想法各异，并且勇于提出供大家讨论。这样的摩擦不至于不会摩擦升温提升大家的热情。","source":"_posts/2016-11-29-fe_team.md","raw":"---\nlayout: post\ntitle:  \"关于组建一支精良团队的构想\"\ndate:   2016-11-29 21:38:00 +0800\ncategories: FE team\ntags: \n- 前端团队\n- 构想\n- 精良\ndescription: \"如何打造一支精良团队的构想\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 今年双十一也过去一段时间，在双十一的大潮中，产生了很多匪夷所思的大数据。天猫的 1207 亿元成交额。在这些大数据的背后，有多少团队在为之付出，又有多少人为之倾尽全力。双十一过后的几周，我不断在订阅号里看见双十一带来的连锁反应，各种技术文章，看了让人心动。但是我又因此思考，如何在这场战争后继续保持一个团队的稳定及继续勇往向前冲的态度。那就是\"打造一支精良的团队\"。\n<!-- more -->\n\n#### 认识一致\n我们可以从技术角度去要求每位团队成员必须达到指定的一个技术体系，也就是解决现已有产品需求的最基本，也是最完善的能力。这样可以节约团队资源，无缝隙的快速接入一个产品。\n\n既然聊到了\"技术体系\"这个词，下面聊聊他的作用及范围，由于本人是从事前端开发工作，可能更了解前端体系，这里就根据我浅陋的了解说说我对\"技术体系\"的想法。\n\n> 我很认同的一句话：技术体系归根结底是要围绕业务发展、团队规模和团队特点量身打造的，主要目的是为了提升团队整体的研发效率，确保线上的质量和稳定性。\n\n开发团队的任务就是完成产品业务，而在完成业务的同时要考虑的东西包括：资源、投入、质量、稳定等等。那前端团队如何通过自身特点去解决这些问题？\n\n- 流程规范\n    1. 代码规范，如遵循 [airbnb](https://github.com/airbnb/javascript) javascript 规范；\n    2. git 版本管理，如遵循 [gitflow](http://www.ituring.com.cn/article/56870) 分支规范；\n    3. 部署规范，分开发、试用、正式三个环境，多机备份，等等。\n\n- 技术工具栈\n    1. 技术栈说到底应该是没有限制的，因为这需要根据开发工程师及项目实际业务需求做出最合适的技术选型。但是至少得学会一种最近流行的框架，有备无患，这也是作为一个前端开发者的必备素养。但不管怎么样，你至少会 [vue 全家桶](https://vuefe.cn/v2/guide/)、[react 全家桶](http://reactjs.cn/react/docs/getting-started-zh-CN.html)、[angular](http://www.apjs.net/) 中的一种吧？如果您是一个移动端爱好的前端开发者，你或许还可以学习[ Weex（Vue Native）](https://alibaba.github.io/weex/)者 [React Native](http://reactnative.cn/docs/next/getting-started.html)，站在前端开发的角度开发多端兼容的 App。write less do more。\n\n- 构建工具栈\n    1. 构建工具如同技术工具栈，但相比又更加主观，开发者可以根据自行需求选用合适的构建工具，不管是选择 [yeoman](http://yeoman.io/authoring/index.html)、[gulp](http://www.gulpjs.com.cn/)、[webpack](https://webpack.vuefe.cn/configuration/index/)、[grunt](http://www.gruntjs.net/)、[sass](http://sass.bootcss.com/docs/sass-reference/)、[less](http://less.bootcss.com/)、[babel](http://babeljs.cn/)、[npm](https://www.npmjs.com/)、[yarn](https://yarnpkg.com/) 里面的一个或者多种的组合，最主要的还是要切合团队配合及实际项目需要。\n\n- 测试工具栈\n    1. 测试工具可以选用比较常用的 [Mocha](http://mochajs.org/)、[Chai](http://chaijs.com/)、[Karma](https://karma-runner.github.io/1.0/intro/installation.html)、[intern](https://theintern.github.io/)、[jasmine](http://jasmine.github.io/) ，对于前端代码而言，进行前端代码自动化测试是保证代码的质量和健壮性的一项可行方案。\n\n- 部署流程及部署平台\n    1. 部署流程是控制上线资源前的最后一道规范限制，部署也需要运维及 DB 严格把控（当然这里可能是指严格把控后端操作数据库）。\n    2. 部署平台是发布资源的最后一道工序，可能按钮一点，新资源就全部一键发布上线。但是为了提高前端团队发布效率，将发布系统与 git、svn 等版本控制系统结合起来构建一个发布资源平台，这样可以对发布资源做很多事情，多成员各自发布各自的互不影响，唯有管理员可以一键发布所有相关人员修改的代码，这样把发布代码不一致性降至最低。\n\n- 监控体系\n    1. 监控系统也是我最近很感兴趣的一件事情，淘宝的 [JSTracker](http://taobaofed.org/blog/2015/10/28/jstracker-how-to-collect-data/)、腾讯的 [badjs-report](https://github.com/BetterJS/badjs-report) 都给了我很好的参考。而监控体系不仅仅局限于此，监控体系本身可以包含：日志上报、性能监控及错误监控等。这样能够第一时间让相关人员知道系统本身存在的问题并第一时间通知开发者，且第一时间修复减少因为此问题带来的损失。\n\n#### 想法各异\n在远古，摩擦升温是起火的一种方式。我希望我的团队每个人想法各异，并且勇于提出供大家讨论。这样的摩擦不至于不会摩擦升温提升大家的热情。","slug":"2016-11-29-fe_team","updated":"2016-11-29T13:44:50.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08x00006c3x1sgy88tl8","content":"<blockquote>\n<p>今年双十一也过去一段时间，在双十一的大潮中，产生了很多匪夷所思的大数据。天猫的 1207 亿元成交额。在这些大数据的背后，有多少团队在为之付出，又有多少人为之倾尽全力。双十一过后的几周，我不断在订阅号里看见双十一带来的连锁反应，各种技术文章，看了让人心动。但是我又因此思考，如何在这场战争后继续保持一个团队的稳定及继续勇往向前冲的态度。那就是”打造一支精良的团队”。<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"认识一致\"><a href=\"#认识一致\" class=\"headerlink\" title=\"认识一致\"></a>认识一致</h4><p>我们可以从技术角度去要求每位团队成员必须达到指定的一个技术体系，也就是解决现已有产品需求的最基本，也是最完善的能力。这样可以节约团队资源，无缝隙的快速接入一个产品。</p>\n<p>既然聊到了”技术体系”这个词，下面聊聊他的作用及范围，由于本人是从事前端开发工作，可能更了解前端体系，这里就根据我浅陋的了解说说我对”技术体系”的想法。</p>\n<blockquote>\n<p>我很认同的一句话：技术体系归根结底是要围绕业务发展、团队规模和团队特点量身打造的，主要目的是为了提升团队整体的研发效率，确保线上的质量和稳定性。</p>\n</blockquote>\n<p>开发团队的任务就是完成产品业务，而在完成业务的同时要考虑的东西包括：资源、投入、质量、稳定等等。那前端团队如何通过自身特点去解决这些问题？</p>\n<ul>\n<li><p>流程规范</p>\n<ol>\n<li>代码规范，如遵循 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">airbnb</a> javascript 规范；</li>\n<li>git 版本管理，如遵循 <a href=\"http://www.ituring.com.cn/article/56870\" target=\"_blank\" rel=\"external\">gitflow</a> 分支规范；</li>\n<li>部署规范，分开发、试用、正式三个环境，多机备份，等等。</li>\n</ol>\n</li>\n<li><p>技术工具栈</p>\n<ol>\n<li>技术栈说到底应该是没有限制的，因为这需要根据开发工程师及项目实际业务需求做出最合适的技术选型。但是至少得学会一种最近流行的框架，有备无患，这也是作为一个前端开发者的必备素养。但不管怎么样，你至少会 <a href=\"https://vuefe.cn/v2/guide/\" target=\"_blank\" rel=\"external\">vue 全家桶</a>、<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"external\">react 全家桶</a>、<a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">angular</a> 中的一种吧？如果您是一个移动端爱好的前端开发者，你或许还可以学习<a href=\"https://alibaba.github.io/weex/\" target=\"_blank\" rel=\"external\"> Weex（Vue Native）</a>者 <a href=\"http://reactnative.cn/docs/next/getting-started.html\" target=\"_blank\" rel=\"external\">React Native</a>，站在前端开发的角度开发多端兼容的 App。write less do more。</li>\n</ol>\n</li>\n<li><p>构建工具栈</p>\n<ol>\n<li>构建工具如同技术工具栈，但相比又更加主观，开发者可以根据自行需求选用合适的构建工具，不管是选择 <a href=\"http://yeoman.io/authoring/index.html\" target=\"_blank\" rel=\"external\">yeoman</a>、<a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">gulp</a>、<a href=\"https://webpack.vuefe.cn/configuration/index/\" target=\"_blank\" rel=\"external\">webpack</a>、<a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"external\">grunt</a>、<a href=\"http://sass.bootcss.com/docs/sass-reference/\" target=\"_blank\" rel=\"external\">sass</a>、<a href=\"http://less.bootcss.com/\" target=\"_blank\" rel=\"external\">less</a>、<a href=\"http://babeljs.cn/\" target=\"_blank\" rel=\"external\">babel</a>、<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm</a>、<a href=\"https://yarnpkg.com/\" target=\"_blank\" rel=\"external\">yarn</a> 里面的一个或者多种的组合，最主要的还是要切合团队配合及实际项目需要。</li>\n</ol>\n</li>\n<li><p>测试工具栈</p>\n<ol>\n<li>测试工具可以选用比较常用的 <a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a>、<a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a>、<a href=\"https://karma-runner.github.io/1.0/intro/installation.html\" target=\"_blank\" rel=\"external\">Karma</a>、<a href=\"https://theintern.github.io/\" target=\"_blank\" rel=\"external\">intern</a>、<a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"external\">jasmine</a> ，对于前端代码而言，进行前端代码自动化测试是保证代码的质量和健壮性的一项可行方案。</li>\n</ol>\n</li>\n<li><p>部署流程及部署平台</p>\n<ol>\n<li>部署流程是控制上线资源前的最后一道规范限制，部署也需要运维及 DB 严格把控（当然这里可能是指严格把控后端操作数据库）。</li>\n<li>部署平台是发布资源的最后一道工序，可能按钮一点，新资源就全部一键发布上线。但是为了提高前端团队发布效率，将发布系统与 git、svn 等版本控制系统结合起来构建一个发布资源平台，这样可以对发布资源做很多事情，多成员各自发布各自的互不影响，唯有管理员可以一键发布所有相关人员修改的代码，这样把发布代码不一致性降至最低。</li>\n</ol>\n</li>\n<li><p>监控体系</p>\n<ol>\n<li>监控系统也是我最近很感兴趣的一件事情，淘宝的 <a href=\"http://taobaofed.org/blog/2015/10/28/jstracker-how-to-collect-data/\" target=\"_blank\" rel=\"external\">JSTracker</a>、腾讯的 <a href=\"https://github.com/BetterJS/badjs-report\" target=\"_blank\" rel=\"external\">badjs-report</a> 都给了我很好的参考。而监控体系不仅仅局限于此，监控体系本身可以包含：日志上报、性能监控及错误监控等。这样能够第一时间让相关人员知道系统本身存在的问题并第一时间通知开发者，且第一时间修复减少因为此问题带来的损失。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"想法各异\"><a href=\"#想法各异\" class=\"headerlink\" title=\"想法各异\"></a>想法各异</h4><p>在远古，摩擦升温是起火的一种方式。我希望我的团队每个人想法各异，并且勇于提出供大家讨论。这样的摩擦不至于不会摩擦升温提升大家的热情。</p>\n","excerpt":"<blockquote>\n<p>今年双十一也过去一段时间，在双十一的大潮中，产生了很多匪夷所思的大数据。天猫的 1207 亿元成交额。在这些大数据的背后，有多少团队在为之付出，又有多少人为之倾尽全力。双十一过后的几周，我不断在订阅号里看见双十一带来的连锁反应，各种技术文章，看了让人心动。但是我又因此思考，如何在这场战争后继续保持一个团队的稳定及继续勇往向前冲的态度。那就是”打造一支精良的团队”。<br>","more":"</p>\n</blockquote>\n<h4 id=\"认识一致\"><a href=\"#认识一致\" class=\"headerlink\" title=\"认识一致\"></a>认识一致</h4><p>我们可以从技术角度去要求每位团队成员必须达到指定的一个技术体系，也就是解决现已有产品需求的最基本，也是最完善的能力。这样可以节约团队资源，无缝隙的快速接入一个产品。</p>\n<p>既然聊到了”技术体系”这个词，下面聊聊他的作用及范围，由于本人是从事前端开发工作，可能更了解前端体系，这里就根据我浅陋的了解说说我对”技术体系”的想法。</p>\n<blockquote>\n<p>我很认同的一句话：技术体系归根结底是要围绕业务发展、团队规模和团队特点量身打造的，主要目的是为了提升团队整体的研发效率，确保线上的质量和稳定性。</p>\n</blockquote>\n<p>开发团队的任务就是完成产品业务，而在完成业务的同时要考虑的东西包括：资源、投入、质量、稳定等等。那前端团队如何通过自身特点去解决这些问题？</p>\n<ul>\n<li><p>流程规范</p>\n<ol>\n<li>代码规范，如遵循 <a href=\"https://github.com/airbnb/javascript\">airbnb</a> javascript 规范；</li>\n<li>git 版本管理，如遵循 <a href=\"http://www.ituring.com.cn/article/56870\">gitflow</a> 分支规范；</li>\n<li>部署规范，分开发、试用、正式三个环境，多机备份，等等。</li>\n</ol>\n</li>\n<li><p>技术工具栈</p>\n<ol>\n<li>技术栈说到底应该是没有限制的，因为这需要根据开发工程师及项目实际业务需求做出最合适的技术选型。但是至少得学会一种最近流行的框架，有备无患，这也是作为一个前端开发者的必备素养。但不管怎么样，你至少会 <a href=\"https://vuefe.cn/v2/guide/\">vue 全家桶</a>、<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\">react 全家桶</a>、<a href=\"http://www.apjs.net/\">angular</a> 中的一种吧？如果您是一个移动端爱好的前端开发者，你或许还可以学习<a href=\"https://alibaba.github.io/weex/\"> Weex（Vue Native）</a>者 <a href=\"http://reactnative.cn/docs/next/getting-started.html\">React Native</a>，站在前端开发的角度开发多端兼容的 App。write less do more。</li>\n</ol>\n</li>\n<li><p>构建工具栈</p>\n<ol>\n<li>构建工具如同技术工具栈，但相比又更加主观，开发者可以根据自行需求选用合适的构建工具，不管是选择 <a href=\"http://yeoman.io/authoring/index.html\">yeoman</a>、<a href=\"http://www.gulpjs.com.cn/\">gulp</a>、<a href=\"https://webpack.vuefe.cn/configuration/index/\">webpack</a>、<a href=\"http://www.gruntjs.net/\">grunt</a>、<a href=\"http://sass.bootcss.com/docs/sass-reference/\">sass</a>、<a href=\"http://less.bootcss.com/\">less</a>、<a href=\"http://babeljs.cn/\">babel</a>、<a href=\"https://www.npmjs.com/\">npm</a>、<a href=\"https://yarnpkg.com/\">yarn</a> 里面的一个或者多种的组合，最主要的还是要切合团队配合及实际项目需要。</li>\n</ol>\n</li>\n<li><p>测试工具栈</p>\n<ol>\n<li>测试工具可以选用比较常用的 <a href=\"http://mochajs.org/\">Mocha</a>、<a href=\"http://chaijs.com/\">Chai</a>、<a href=\"https://karma-runner.github.io/1.0/intro/installation.html\">Karma</a>、<a href=\"https://theintern.github.io/\">intern</a>、<a href=\"http://jasmine.github.io/\">jasmine</a> ，对于前端代码而言，进行前端代码自动化测试是保证代码的质量和健壮性的一项可行方案。</li>\n</ol>\n</li>\n<li><p>部署流程及部署平台</p>\n<ol>\n<li>部署流程是控制上线资源前的最后一道规范限制，部署也需要运维及 DB 严格把控（当然这里可能是指严格把控后端操作数据库）。</li>\n<li>部署平台是发布资源的最后一道工序，可能按钮一点，新资源就全部一键发布上线。但是为了提高前端团队发布效率，将发布系统与 git、svn 等版本控制系统结合起来构建一个发布资源平台，这样可以对发布资源做很多事情，多成员各自发布各自的互不影响，唯有管理员可以一键发布所有相关人员修改的代码，这样把发布代码不一致性降至最低。</li>\n</ol>\n</li>\n<li><p>监控体系</p>\n<ol>\n<li>监控系统也是我最近很感兴趣的一件事情，淘宝的 <a href=\"http://taobaofed.org/blog/2015/10/28/jstracker-how-to-collect-data/\">JSTracker</a>、腾讯的 <a href=\"https://github.com/BetterJS/badjs-report\">badjs-report</a> 都给了我很好的参考。而监控体系不仅仅局限于此，监控体系本身可以包含：日志上报、性能监控及错误监控等。这样能够第一时间让相关人员知道系统本身存在的问题并第一时间通知开发者，且第一时间修复减少因为此问题带来的损失。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"想法各异\"><a href=\"#想法各异\" class=\"headerlink\" title=\"想法各异\"></a>想法各异</h4><p>在远古，摩擦升温是起火的一种方式。我希望我的团队每个人想法各异，并且勇于提出供大家讨论。这样的摩擦不至于不会摩擦升温提升大家的热情。</p>"},{"layout":"post","title":"JFinal学习笔记-Demo 部署-lesson02","date":"2014-07-29T22:18:24.000Z","description":"JFinal 环境部署","author":"acrens","published":1,"_content":"> 延续 JFinal lesson01，开始搭建一个 JFinal 案例\n<!--more-->\n\n### JFinal 是 JAVA 极速 WEB 开发的开源框架\n一、环境：MyEclipse9+Tomcat6+MySql;\n二、准备 jar 包，如下图：\n![](/css/images/jfinal-jar.jpg)\n三、开始在MyEclipse9+Tomcat6+MySql部署一个学生信息管理小Demo：\n\n  1. 创建Web Project工程；\n  2. 在WEB-INFO文件目录下新建lib文件夹并放入四个jar包，然后build path；\n  3. 创建jfinalstudy01数据库并创建两张表student+classes，如下：\n  ``` java\n  create table classes\n  (\n      classesid      int(4) not null,\n      classesname    varchar(40),\n      classesaddress varchar(60)\n  );\n  create table student\n  (\n      studentid   int(4) not null,\n      studentname varchar(10),\n      studentage  int(4),\n      studentsex  varchar(4),\n      classesid   int(4)\n  );\n  ```\n  4. 添加以下配置至web.xml（同时新建JFinalAllConfig类）:\n\n  ![](/css/images/jfinal-allconfig.jpg)\n  ``` java\n  public class JFinalAllConfig extends JFinalConfig {\n\n     @Override\n     public void configConstant(Constants me) {\n             me.setDevMode(true);\n     }\n\n     @Override\n     public void configRoute(Routes me) {\n             me.add(\"/\", StudentController.class);\n             me.add(\"/student\", StudentController.class);\n     }\n\n     @Override\n     public void configPlugin(Plugins me) {\n             C3p0Plugin cp = new C3p0Plugin(\n                             \"jdbc:mysql://localhost:3306/JFinalStudy01\", \"root\", \"\");\n             me.add(cp);\n             ActiveRecordPlugin arp = new ActiveRecordPlugin(cp);\n             me.add(arp);\n          \n             // 三个参数依次为表名、主键、model\n             arp.addMapping(\"student\", \"studentid\", Student.class);\n             arp.addMapping(\"classes\", \"classesid\", Classes.class);\n     }\n\n     @Override\n     public void configInterceptor(Interceptors me) {\n             // TODO Auto-generated method stub\n\n     }\n\n     @Override\n     public void configHandler(Handlers me) {\n             // TODO Auto-generated method stub\n\n     }\n\n     }\n  ```\n  5. 新建Student、Classes的model：\n    - Student：\n    ``` java\n    package com.phy.jfinal.model;\n\n    import com.jfinal.plugin.activerecord.Model;\n\n    public class Student extends Model {\n\n           private static final long serialVersionUID = 1L;\n        \n           public static final Student dao = new Student();\n\n           public Classes getClasses() {\n                   return Classes.dao.findById(get(\"classesid\"));\n           }\n    }\n    ```\n    - Classes：\n    ``` java\n    package com.phy.jfinal.model;\n\n    import com.jfinal.plugin.activerecord.Model;\n\n    public class Classes extends Model {\n            \n           private static final long serialVersionUID = 1L;\n        \n           public static final Classes dao = new Classes();\n    }\n    ```\n  6. 新建StudentController（接收HTTP请求处理的控制器）：\n  ``` java\n  package com.phy.jfinal.controller;\n\n  import java.util.List;\n\n  import com.jfinal.aop.Before;\n  import com.jfinal.core.Controller;\n  import com.phy.jfinal.interceptor.StudentInterceptor;\n  import com.phy.jfinal.model.Student;\n  import com.phy.jfinal.validator.StudentValidator;\n\n  public class StudentController extends Controller {\n             private static int num = 0;\n\n               // 进行获取学生信息列表前的拦截操作\n             @Before(StudentInterceptor.class)\n             public void index() {\n                     List list = Student.dao.find(\"select * from student\");\n                     setAttr(\"studentList\", list);\n                     render(\"/index.html\");\n             }\n\n             public void add() {\n                     render(\"/add.html\");\n             }\n\n             public void delete() {\n                     // 获取url请求中第一个值\n                     Student.dao.deleteById(getParaToInt());\n                     forwardAction(\"/student\");\n             }\n\n             public void update() {\n                     Student student = getModel(Student.class);\n                     student.update();\n                     forwardAction(\"/student\");\n             }\n\n             public void get() {\n                     Student student = Student.dao.findById(getParaToInt());\n                     setAttr(\"student\", student);\n                     render(\"/index2.html\");\n             }\n\n            //StudentValidator是对进行保存操作时的变量的验证\n           @Before(StudentValidator.class)\n            public void save() {\n                    Student student = getModel(Student.class);\n                    student.set(\"studentid\", num++).save();\n                    forwardAction(\"/student\");\n            }\n     }\n  ```\n  7. 拦截器及验证器：\n    - 拦截器\n    ``` java\n    package com.phy.jfinal.interceptor;\n\n    import com.jfinal.aop.Interceptor;\n    import com.jfinal.core.ActionInvocation;\n\n    public class StudentInterceptor implements Interceptor {\n\n           @Override\n           public void intercept(ActionInvocation ai) {\n                   System.out.println(\"action注入之前\");\n                       ai.invoke();\n                   System.out.println(\"action注入之后\");\n            }\n    }\n    ```\n    - 验证器\n    ``` java\n    package com.phy.jfinal.validator;\n\n    import com.jfinal.core.Controller;\n    import com.jfinal.validate.Validator;\n\n    public class StudentValidator extends Validator {\n\n           //在校验失败时才会调用\n           @Override\n           protected void handleError(Controller controller) {\n                   controller.keepPara(\"student.studentname\");//将提交的值再传回页面以便保持原先输入的值\n                     controller.render(\"/add.html\");\n           }\n\n          @Override\n          protected void validate(Controller controller) {\n                   //验证表单域name，返回信息key,返回信息value\n                   validateRequiredString(\"student.studentname\", \"studentnameMsg\",\n                           \"请输入学生名称!\");\n          }\n    }\n    ```\n  8. 前台实现（通过freemarker读取数据），在WebRoot目录下新建index.html，add.html，change.html(分别为学生信息列表获取、学生信息添加、学生信息修改，下面依次列出实现代码)：\n\n    - index.html\n    ![](/css/images/jfinal-html-index1.jpg)\n    ![](/css/images/jfinal-html-index2.jpg)\n    - add.html\n    ![](/css/images/jfinal-html-add1.jpg)\n    ![](/css/images/jfinal-html-add2.jpg)\n    - change.html\n    ![](/css/images/jfinal-html-change1.jpg)\n    ![](/css/images/jfinal-html-change2.jpg)\n  9. 三个CSS文件（添加在WebRoot目录下的css文件夹下：\n\n    - common.css\n    ![](/css/images/jfinal-css-common.jpg)\n    - add.css\n    ![](/css/images/jfinal-css-add.jpg)\n    - index.css\n    ![](/css/images/jfinal-css-index.jpg)\n  10. 以下分别为整体项目目录结构及相关截图：\n\n  ![](/css/images/jfinal-root.jpg)\n  ![](/css/images/jfinal-page1.jpg)\n  ![](/css/images/jfinal-page2.jpg)\n  ![](/css/images/jfinal-page3.jpg)","source":"_posts/2014-07-29-jfinal-lesson02.md","raw":"---\nlayout: post\ntitle:  \"JFinal学习笔记-Demo 部署-lesson02\"\ndate:   2014-07-29 22:18:24 +0800\ncategories: JFinal\ntags: \n- JFinal\ndescription: \"JFinal 环境部署\"\nauthor: \"acrens\"\npublished: true\n---\n> 延续 JFinal lesson01，开始搭建一个 JFinal 案例\n<!--more-->\n\n### JFinal 是 JAVA 极速 WEB 开发的开源框架\n一、环境：MyEclipse9+Tomcat6+MySql;\n二、准备 jar 包，如下图：\n![](/css/images/jfinal-jar.jpg)\n三、开始在MyEclipse9+Tomcat6+MySql部署一个学生信息管理小Demo：\n\n  1. 创建Web Project工程；\n  2. 在WEB-INFO文件目录下新建lib文件夹并放入四个jar包，然后build path；\n  3. 创建jfinalstudy01数据库并创建两张表student+classes，如下：\n  ``` java\n  create table classes\n  (\n      classesid      int(4) not null,\n      classesname    varchar(40),\n      classesaddress varchar(60)\n  );\n  create table student\n  (\n      studentid   int(4) not null,\n      studentname varchar(10),\n      studentage  int(4),\n      studentsex  varchar(4),\n      classesid   int(4)\n  );\n  ```\n  4. 添加以下配置至web.xml（同时新建JFinalAllConfig类）:\n\n  ![](/css/images/jfinal-allconfig.jpg)\n  ``` java\n  public class JFinalAllConfig extends JFinalConfig {\n\n     @Override\n     public void configConstant(Constants me) {\n             me.setDevMode(true);\n     }\n\n     @Override\n     public void configRoute(Routes me) {\n             me.add(\"/\", StudentController.class);\n             me.add(\"/student\", StudentController.class);\n     }\n\n     @Override\n     public void configPlugin(Plugins me) {\n             C3p0Plugin cp = new C3p0Plugin(\n                             \"jdbc:mysql://localhost:3306/JFinalStudy01\", \"root\", \"\");\n             me.add(cp);\n             ActiveRecordPlugin arp = new ActiveRecordPlugin(cp);\n             me.add(arp);\n          \n             // 三个参数依次为表名、主键、model\n             arp.addMapping(\"student\", \"studentid\", Student.class);\n             arp.addMapping(\"classes\", \"classesid\", Classes.class);\n     }\n\n     @Override\n     public void configInterceptor(Interceptors me) {\n             // TODO Auto-generated method stub\n\n     }\n\n     @Override\n     public void configHandler(Handlers me) {\n             // TODO Auto-generated method stub\n\n     }\n\n     }\n  ```\n  5. 新建Student、Classes的model：\n    - Student：\n    ``` java\n    package com.phy.jfinal.model;\n\n    import com.jfinal.plugin.activerecord.Model;\n\n    public class Student extends Model {\n\n           private static final long serialVersionUID = 1L;\n        \n           public static final Student dao = new Student();\n\n           public Classes getClasses() {\n                   return Classes.dao.findById(get(\"classesid\"));\n           }\n    }\n    ```\n    - Classes：\n    ``` java\n    package com.phy.jfinal.model;\n\n    import com.jfinal.plugin.activerecord.Model;\n\n    public class Classes extends Model {\n            \n           private static final long serialVersionUID = 1L;\n        \n           public static final Classes dao = new Classes();\n    }\n    ```\n  6. 新建StudentController（接收HTTP请求处理的控制器）：\n  ``` java\n  package com.phy.jfinal.controller;\n\n  import java.util.List;\n\n  import com.jfinal.aop.Before;\n  import com.jfinal.core.Controller;\n  import com.phy.jfinal.interceptor.StudentInterceptor;\n  import com.phy.jfinal.model.Student;\n  import com.phy.jfinal.validator.StudentValidator;\n\n  public class StudentController extends Controller {\n             private static int num = 0;\n\n               // 进行获取学生信息列表前的拦截操作\n             @Before(StudentInterceptor.class)\n             public void index() {\n                     List list = Student.dao.find(\"select * from student\");\n                     setAttr(\"studentList\", list);\n                     render(\"/index.html\");\n             }\n\n             public void add() {\n                     render(\"/add.html\");\n             }\n\n             public void delete() {\n                     // 获取url请求中第一个值\n                     Student.dao.deleteById(getParaToInt());\n                     forwardAction(\"/student\");\n             }\n\n             public void update() {\n                     Student student = getModel(Student.class);\n                     student.update();\n                     forwardAction(\"/student\");\n             }\n\n             public void get() {\n                     Student student = Student.dao.findById(getParaToInt());\n                     setAttr(\"student\", student);\n                     render(\"/index2.html\");\n             }\n\n            //StudentValidator是对进行保存操作时的变量的验证\n           @Before(StudentValidator.class)\n            public void save() {\n                    Student student = getModel(Student.class);\n                    student.set(\"studentid\", num++).save();\n                    forwardAction(\"/student\");\n            }\n     }\n  ```\n  7. 拦截器及验证器：\n    - 拦截器\n    ``` java\n    package com.phy.jfinal.interceptor;\n\n    import com.jfinal.aop.Interceptor;\n    import com.jfinal.core.ActionInvocation;\n\n    public class StudentInterceptor implements Interceptor {\n\n           @Override\n           public void intercept(ActionInvocation ai) {\n                   System.out.println(\"action注入之前\");\n                       ai.invoke();\n                   System.out.println(\"action注入之后\");\n            }\n    }\n    ```\n    - 验证器\n    ``` java\n    package com.phy.jfinal.validator;\n\n    import com.jfinal.core.Controller;\n    import com.jfinal.validate.Validator;\n\n    public class StudentValidator extends Validator {\n\n           //在校验失败时才会调用\n           @Override\n           protected void handleError(Controller controller) {\n                   controller.keepPara(\"student.studentname\");//将提交的值再传回页面以便保持原先输入的值\n                     controller.render(\"/add.html\");\n           }\n\n          @Override\n          protected void validate(Controller controller) {\n                   //验证表单域name，返回信息key,返回信息value\n                   validateRequiredString(\"student.studentname\", \"studentnameMsg\",\n                           \"请输入学生名称!\");\n          }\n    }\n    ```\n  8. 前台实现（通过freemarker读取数据），在WebRoot目录下新建index.html，add.html，change.html(分别为学生信息列表获取、学生信息添加、学生信息修改，下面依次列出实现代码)：\n\n    - index.html\n    ![](/css/images/jfinal-html-index1.jpg)\n    ![](/css/images/jfinal-html-index2.jpg)\n    - add.html\n    ![](/css/images/jfinal-html-add1.jpg)\n    ![](/css/images/jfinal-html-add2.jpg)\n    - change.html\n    ![](/css/images/jfinal-html-change1.jpg)\n    ![](/css/images/jfinal-html-change2.jpg)\n  9. 三个CSS文件（添加在WebRoot目录下的css文件夹下：\n\n    - common.css\n    ![](/css/images/jfinal-css-common.jpg)\n    - add.css\n    ![](/css/images/jfinal-css-add.jpg)\n    - index.css\n    ![](/css/images/jfinal-css-index.jpg)\n  10. 以下分别为整体项目目录结构及相关截图：\n\n  ![](/css/images/jfinal-root.jpg)\n  ![](/css/images/jfinal-page1.jpg)\n  ![](/css/images/jfinal-page2.jpg)\n  ![](/css/images/jfinal-page3.jpg)","slug":"2014-07-29-jfinal-lesson02","updated":"2016-09-20T12:46:50.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08x5000ac3x1jkdkt5hr","content":"<blockquote>\n<p>延续 JFinal lesson01，开始搭建一个 JFinal 案例<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"JFinal-是-JAVA-极速-WEB-开发的开源框架\"><a href=\"#JFinal-是-JAVA-极速-WEB-开发的开源框架\" class=\"headerlink\" title=\"JFinal 是 JAVA 极速 WEB 开发的开源框架\"></a>JFinal 是 JAVA 极速 WEB 开发的开源框架</h3><p>一、环境：MyEclipse9+Tomcat6+MySql;<br>二、准备 jar 包，如下图：<br><img src=\"/css/images/jfinal-jar.jpg\" alt=\"\"><br>三、开始在MyEclipse9+Tomcat6+MySql部署一个学生信息管理小Demo：</p>\n<ol>\n<li>创建Web Project工程；</li>\n<li>在WEB-INFO文件目录下新建lib文件夹并放入四个jar包，然后build path；</li>\n<li><p>创建jfinalstudy01数据库并创建两张表student+classes，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">create table <span class=\"title\">classes</span></span></div><div class=\"line\"><span class=\"params\">(</span></div><div class=\"line\">    classesid      <span class=\"keyword\">int</span>(<span class=\"number\">4</span>) not <span class=\"keyword\">null</span>,</div><div class=\"line\">    classesname    <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">40</span>)</span>,</div><div class=\"line\">    classesaddress <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">60</span>)</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"function\">create table <span class=\"title\">student</span></span></div><div class=\"line\"><span class=\"params\">(</span></div><div class=\"line\">    studentid   <span class=\"keyword\">int</span>(<span class=\"number\">4</span>) not <span class=\"keyword\">null</span>,</div><div class=\"line\">    studentname <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">10</span>)</span>,</div><div class=\"line\">    studentage  <span class=\"title\">int</span><span class=\"params\">(<span class=\"number\">4</span>)</span>,</div><div class=\"line\">    studentsex  <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">4</span>)</span>,</div><div class=\"line\">    classesid   <span class=\"title\">int</span><span class=\"params\">(<span class=\"number\">4</span>)</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下配置至web.xml（同时新建JFinalAllConfig类）:</p>\n<p><img src=\"/css/images/jfinal-allconfig.jpg\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JFinalAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFinalConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configConstant</span><span class=\"params\">(Constants me)</span> </span>&#123;</div><div class=\"line\">           me.setDevMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configRoute</span><span class=\"params\">(Routes me)</span> </span>&#123;</div><div class=\"line\">           me.add(<span class=\"string\">\"/\"</span>, StudentController.class);</div><div class=\"line\">           me.add(<span class=\"string\">\"/student\"</span>, StudentController.class);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configPlugin</span><span class=\"params\">(Plugins me)</span> </span>&#123;</div><div class=\"line\">           C3p0Plugin cp = <span class=\"keyword\">new</span> C3p0Plugin(</div><div class=\"line\">                           <span class=\"string\">\"jdbc:mysql://localhost:3306/JFinalStudy01\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">           me.add(cp);</div><div class=\"line\">           ActiveRecordPlugin arp = <span class=\"keyword\">new</span> ActiveRecordPlugin(cp);</div><div class=\"line\">           me.add(arp);</div><div class=\"line\">        </div><div class=\"line\">           <span class=\"comment\">// 三个参数依次为表名、主键、model</span></div><div class=\"line\">           arp.addMapping(<span class=\"string\">\"student\"</span>, <span class=\"string\">\"studentid\"</span>, Student.class);</div><div class=\"line\">           arp.addMapping(<span class=\"string\">\"classes\"</span>, <span class=\"string\">\"classesid\"</span>, Classes.class);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configInterceptor</span><span class=\"params\">(Interceptors me)</span> </span>&#123;</div><div class=\"line\">           <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configHandler</span><span class=\"params\">(Handlers me)</span> </span>&#123;</div><div class=\"line\">           <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建Student、Classes的model：</p>\n<ul>\n<li><p>Student：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.plugin.activerecord.Model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">    </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Student dao = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> Classes <span class=\"title\">getClasses</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Classes.dao.findById(get(<span class=\"string\">\"classesid\"</span>));</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Classes：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.plugin.activerecord.Model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classes</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">    </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Classes dao = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>新建StudentController（接收HTTP请求处理的控制器）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.aop.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.interceptor.StudentInterceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.model.Student;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.validator.StudentValidator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\">// 进行获取学生信息列表前的拦截操作</span></div><div class=\"line\">           <span class=\"meta\">@Before</span>(StudentInterceptor.class)</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   List list = Student.dao.find(<span class=\"string\">\"select * from student\"</span>);</div><div class=\"line\">                   setAttr(<span class=\"string\">\"studentList\"</span>, list);</div><div class=\"line\">                   render(<span class=\"string\">\"/index.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   render(<span class=\"string\">\"/add.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   <span class=\"comment\">// 获取url请求中第一个值</span></div><div class=\"line\">                   Student.dao.deleteById(getParaToInt());</div><div class=\"line\">                   forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   Student student = getModel(Student.class);</div><div class=\"line\">                   student.update();</div><div class=\"line\">                   forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   Student student = Student.dao.findById(getParaToInt());</div><div class=\"line\">                   setAttr(<span class=\"string\">\"student\"</span>, student);</div><div class=\"line\">                   render(<span class=\"string\">\"/index2.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//StudentValidator是对进行保存操作时的变量的验证</span></div><div class=\"line\">         <span class=\"meta\">@Before</span>(StudentValidator.class)</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                  Student student = getModel(Student.class);</div><div class=\"line\">                  student.set(<span class=\"string\">\"studentid\"</span>, num++).save();</div><div class=\"line\">                  forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>拦截器及验证器：</p>\n<ul>\n<li><p>拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.interceptor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.aop.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.ActionInvocation;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation ai)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"action注入之前\"</span>);</div><div class=\"line\">                   ai.invoke();</div><div class=\"line\">               System.out.println(<span class=\"string\">\"action注入之后\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>验证器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.validator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.validate.Validator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentValidator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Validator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//在校验失败时才会调用</span></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">handleError</span><span class=\"params\">(Controller controller)</span> </span>&#123;</div><div class=\"line\">               controller.keepPara(<span class=\"string\">\"student.studentname\"</span>);<span class=\"comment\">//将提交的值再传回页面以便保持原先输入的值</span></div><div class=\"line\">                 controller.render(<span class=\"string\">\"/add.html\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">validate</span><span class=\"params\">(Controller controller)</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//验证表单域name，返回信息key,返回信息value</span></div><div class=\"line\">               validateRequiredString(<span class=\"string\">\"student.studentname\"</span>, <span class=\"string\">\"studentnameMsg\"</span>,</div><div class=\"line\">                       <span class=\"string\">\"请输入学生名称!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>前台实现（通过freemarker读取数据），在WebRoot目录下新建index.html，add.html，change.html(分别为学生信息列表获取、学生信息添加、学生信息修改，下面依次列出实现代码)：</p>\n<ul>\n<li>index.html<br><img src=\"/css/images/jfinal-html-index1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-index2.jpg\" alt=\"\"></li>\n<li>add.html<br><img src=\"/css/images/jfinal-html-add1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-add2.jpg\" alt=\"\"></li>\n<li>change.html<br><img src=\"/css/images/jfinal-html-change1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-change2.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>三个CSS文件（添加在WebRoot目录下的css文件夹下：</p>\n<ul>\n<li>common.css<br><img src=\"/css/images/jfinal-css-common.jpg\" alt=\"\"></li>\n<li>add.css<br><img src=\"/css/images/jfinal-css-add.jpg\" alt=\"\"></li>\n<li>index.css<br><img src=\"/css/images/jfinal-css-index.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>以下分别为整体项目目录结构及相关截图：</p>\n<p><img src=\"/css/images/jfinal-root.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page2.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page3.jpg\" alt=\"\"></p>\n</li>\n</ol>\n","excerpt":"<blockquote>\n<p>延续 JFinal lesson01，开始搭建一个 JFinal 案例<br>","more":"</p>\n</blockquote>\n<h3 id=\"JFinal-是-JAVA-极速-WEB-开发的开源框架\"><a href=\"#JFinal-是-JAVA-极速-WEB-开发的开源框架\" class=\"headerlink\" title=\"JFinal 是 JAVA 极速 WEB 开发的开源框架\"></a>JFinal 是 JAVA 极速 WEB 开发的开源框架</h3><p>一、环境：MyEclipse9+Tomcat6+MySql;<br>二、准备 jar 包，如下图：<br><img src=\"/css/images/jfinal-jar.jpg\" alt=\"\"><br>三、开始在MyEclipse9+Tomcat6+MySql部署一个学生信息管理小Demo：</p>\n<ol>\n<li>创建Web Project工程；</li>\n<li>在WEB-INFO文件目录下新建lib文件夹并放入四个jar包，然后build path；</li>\n<li><p>创建jfinalstudy01数据库并创建两张表student+classes，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">create table <span class=\"title\">classes</span></div><div class=\"line\"><span class=\"params\">(</div><div class=\"line\">    classesid      <span class=\"keyword\">int</span>(<span class=\"number\">4</span>)</span> not <span class=\"keyword\">null</span>,</div><div class=\"line\">    classesname    <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">40</span>)</span>,</div><div class=\"line\">    classesaddress <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">60</span>)</span></div><div class=\"line\">)</span>;</div><div class=\"line\"><span class=\"function\">create table <span class=\"title\">student</span></div><div class=\"line\"><span class=\"params\">(</div><div class=\"line\">    studentid   <span class=\"keyword\">int</span>(<span class=\"number\">4</span>)</span> not <span class=\"keyword\">null</span>,</div><div class=\"line\">    studentname <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">10</span>)</span>,</div><div class=\"line\">    studentage  <span class=\"title\">int</span><span class=\"params\">(<span class=\"number\">4</span>)</span>,</div><div class=\"line\">    studentsex  <span class=\"title\">varchar</span><span class=\"params\">(<span class=\"number\">4</span>)</span>,</div><div class=\"line\">    classesid   <span class=\"title\">int</span><span class=\"params\">(<span class=\"number\">4</span>)</span></div><div class=\"line\">)</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加以下配置至web.xml（同时新建JFinalAllConfig类）:</p>\n<p><img src=\"/css/images/jfinal-allconfig.jpg\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JFinalAllConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">JFinalConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configConstant</span><span class=\"params\">(Constants me)</span> </span>&#123;</div><div class=\"line\">           me.setDevMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configRoute</span><span class=\"params\">(Routes me)</span> </span>&#123;</div><div class=\"line\">           me.add(<span class=\"string\">\"/\"</span>, StudentController.class);</div><div class=\"line\">           me.add(<span class=\"string\">\"/student\"</span>, StudentController.class);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configPlugin</span><span class=\"params\">(Plugins me)</span> </span>&#123;</div><div class=\"line\">           C3p0Plugin cp = <span class=\"keyword\">new</span> C3p0Plugin(</div><div class=\"line\">                           <span class=\"string\">\"jdbc:mysql://localhost:3306/JFinalStudy01\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">           me.add(cp);</div><div class=\"line\">           ActiveRecordPlugin arp = <span class=\"keyword\">new</span> ActiveRecordPlugin(cp);</div><div class=\"line\">           me.add(arp);</div><div class=\"line\">        </div><div class=\"line\">           <span class=\"comment\">// 三个参数依次为表名、主键、model</span></div><div class=\"line\">           arp.addMapping(<span class=\"string\">\"student\"</span>, <span class=\"string\">\"studentid\"</span>, Student.class);</div><div class=\"line\">           arp.addMapping(<span class=\"string\">\"classes\"</span>, <span class=\"string\">\"classesid\"</span>, Classes.class);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configInterceptor</span><span class=\"params\">(Interceptors me)</span> </span>&#123;</div><div class=\"line\">           <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configHandler</span><span class=\"params\">(Handlers me)</span> </span>&#123;</div><div class=\"line\">           <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建Student、Classes的model：</p>\n<ul>\n<li><p>Student：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.plugin.activerecord.Model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">    </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Student dao = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> Classes <span class=\"title\">getClasses</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> Classes.dao.findById(get(<span class=\"string\">\"classesid\"</span>));</div><div class=\"line\">       &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Classes：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.plugin.activerecord.Model;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classes</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\">    </div><div class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Classes dao = <span class=\"keyword\">new</span> Classes();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>新建StudentController（接收HTTP请求处理的控制器）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.aop.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.interceptor.StudentInterceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.model.Student;</div><div class=\"line\"><span class=\"keyword\">import</span> com.phy.jfinal.validator.StudentValidator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\">// 进行获取学生信息列表前的拦截操作</span></div><div class=\"line\">           <span class=\"meta\">@Before</span>(StudentInterceptor.class)</div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   List list = Student.dao.find(<span class=\"string\">\"select * from student\"</span>);</div><div class=\"line\">                   setAttr(<span class=\"string\">\"studentList\"</span>, list);</div><div class=\"line\">                   render(<span class=\"string\">\"/index.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   render(<span class=\"string\">\"/add.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   <span class=\"comment\">// 获取url请求中第一个值</span></div><div class=\"line\">                   Student.dao.deleteById(getParaToInt());</div><div class=\"line\">                   forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   Student student = getModel(Student.class);</div><div class=\"line\">                   student.update();</div><div class=\"line\">                   forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                   Student student = Student.dao.findById(getParaToInt());</div><div class=\"line\">                   setAttr(<span class=\"string\">\"student\"</span>, student);</div><div class=\"line\">                   render(<span class=\"string\">\"/index2.html\"</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">//StudentValidator是对进行保存操作时的变量的验证</span></div><div class=\"line\">         <span class=\"meta\">@Before</span>(StudentValidator.class)</div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                  Student student = getModel(Student.class);</div><div class=\"line\">                  student.set(<span class=\"string\">\"studentid\"</span>, num++).save();</div><div class=\"line\">                  forwardAction(<span class=\"string\">\"/student\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>拦截器及验证器：</p>\n<ul>\n<li><p>拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.interceptor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.aop.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.ActionInvocation;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">intercept</span><span class=\"params\">(ActionInvocation ai)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"action注入之前\"</span>);</div><div class=\"line\">                   ai.invoke();</div><div class=\"line\">               System.out.println(<span class=\"string\">\"action注入之后\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>验证器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.phy.jfinal.validator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.core.Controller;</div><div class=\"line\"><span class=\"keyword\">import</span> com.jfinal.validate.Validator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentValidator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Validator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//在校验失败时才会调用</span></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">handleError</span><span class=\"params\">(Controller controller)</span> </span>&#123;</div><div class=\"line\">               controller.keepPara(<span class=\"string\">\"student.studentname\"</span>);<span class=\"comment\">//将提交的值再传回页面以便保持原先输入的值</span></div><div class=\"line\">                 controller.render(<span class=\"string\">\"/add.html\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">validate</span><span class=\"params\">(Controller controller)</span> </span>&#123;</div><div class=\"line\">               <span class=\"comment\">//验证表单域name，返回信息key,返回信息value</span></div><div class=\"line\">               validateRequiredString(<span class=\"string\">\"student.studentname\"</span>, <span class=\"string\">\"studentnameMsg\"</span>,</div><div class=\"line\">                       <span class=\"string\">\"请输入学生名称!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>前台实现（通过freemarker读取数据），在WebRoot目录下新建index.html，add.html，change.html(分别为学生信息列表获取、学生信息添加、学生信息修改，下面依次列出实现代码)：</p>\n<ul>\n<li>index.html<br><img src=\"/css/images/jfinal-html-index1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-index2.jpg\" alt=\"\"></li>\n<li>add.html<br><img src=\"/css/images/jfinal-html-add1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-add2.jpg\" alt=\"\"></li>\n<li>change.html<br><img src=\"/css/images/jfinal-html-change1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-html-change2.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>三个CSS文件（添加在WebRoot目录下的css文件夹下：</p>\n<ul>\n<li>common.css<br><img src=\"/css/images/jfinal-css-common.jpg\" alt=\"\"></li>\n<li>add.css<br><img src=\"/css/images/jfinal-css-add.jpg\" alt=\"\"></li>\n<li>index.css<br><img src=\"/css/images/jfinal-css-index.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>以下分别为整体项目目录结构及相关截图：</p>\n<p><img src=\"/css/images/jfinal-root.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page1.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page2.jpg\" alt=\"\"><br><img src=\"/css/images/jfinal-page3.jpg\" alt=\"\"></p>\n</li>\n</ol>"},{"layout":"post","title":"javascript 中 TDZ 的理解","date":"2017-01-22T14:15:00.000Z","description":"javascript 中 TDZ 的理解","author":"acrens","published":1,"_content":"\n> 春节快到了，假期也快到了，空闲之余刷个微博，看见 @ruanyf 提出了一个问题与 TDZ 有关，但是貌似阮大当时还没有意识到这个问题，多亏一些其他业内同仁提出了与 TDZ 相关；当然，以阮大的能力这都不是事。由于当时我本身也还不知道 TDZ 这一回事没有看懂，所以就花了一些时间去搞清楚什么是 TDZ 及TDZ会带来一些什么问题，本文主要是用于介绍我对 TDZ 的一些理解，如有问题，多谢指出。\n<!-- more -->\n\n#### 示例\n\n- 案例一\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = y, y) {\n        console.log(x);\n    }\n    foo();  // ReferenceError: y is not defined\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，参数作用域在 x = y 之后才定义 let y，注意：let 定义，所以根据 let 定义变量的作用知道 x = y 肯定会报错；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : y;   // y not defined\n            let y = arguments[1];\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n- 案例二\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = function(){console.log(y)}, y = 2) {\n        x(); // 2\n        y = 3;\n        x(); // 3\n    }\n    foo();\n    console.log(y); //1\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被申明为匿名函数变量，此时函数并未被执行，所以正常；之后定义 y 值为 2，此时调用 x() 输出的当然是变量 y 的值，之后继续修改 y 的值，再继续调用 x()，输出 y 最新值 3；当执行外部 console.log(y) 时并不能访问内部函数变量，访问的变量是当前域下的 y = 1 的值 1，所以输出 1；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n            let y = arguments[1] !== (void 0) ? arguments[1] : 2;\n            x(); // 2\n            y = 3;\n            x();    // 3\n        }\n        foo();\n        console.log(y); // 1\n\n        return {};\n    }\n    ```\n\n- 案例三\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = function(){console.log(y)}) {\n        let y = 3;\n        x(); // 1\n    }\n    foo();\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，所以输出最外层变量 y 的值 1；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n\n            function funBody() {\n                let y = 3;\n                x();\n            }\n            funBody();\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n- 案例四\n    1. 代码\n    ``` javascript\n    function foo(x = function(){console.log(y)}) {\n        let y = 3;\n        x(); // // ReferenceError: y is not defined\n    }\n    foo();\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，否则报 y 没有被定义错误，此案例只是案例三的一种测试；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n\n            function funBody() {\n                let y = 3;\n                x();\n            }\n            funBody();\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n#### 参考\n以上核心部分在代码翻译部分，通过配合一下资料及个人的理解，翻译出通俗易懂的代码：\n- [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let)\n- [http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters](http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters)\n- [https://github.com/google/traceur-compiler/issues/1604](https://github.com/google/traceur-compiler/issues/1604)","source":"_posts/2017-01-22-TDZ.md","raw":"---\nlayout: post\ntitle:  \"javascript 中 TDZ 的理解\"\ndate:   2017-01-22 14:15:00 +0800\ncategories: TDZ（Temporal Dead Zone）\ntags: \n- javascript\n- TDZ\n- Temporal Dead Zone\ndescription: \"javascript 中 TDZ 的理解\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 春节快到了，假期也快到了，空闲之余刷个微博，看见 @ruanyf 提出了一个问题与 TDZ 有关，但是貌似阮大当时还没有意识到这个问题，多亏一些其他业内同仁提出了与 TDZ 相关；当然，以阮大的能力这都不是事。由于当时我本身也还不知道 TDZ 这一回事没有看懂，所以就花了一些时间去搞清楚什么是 TDZ 及TDZ会带来一些什么问题，本文主要是用于介绍我对 TDZ 的一些理解，如有问题，多谢指出。\n<!-- more -->\n\n#### 示例\n\n- 案例一\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = y, y) {\n        console.log(x);\n    }\n    foo();  // ReferenceError: y is not defined\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，参数作用域在 x = y 之后才定义 let y，注意：let 定义，所以根据 let 定义变量的作用知道 x = y 肯定会报错；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : y;   // y not defined\n            let y = arguments[1];\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n- 案例二\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = function(){console.log(y)}, y = 2) {\n        x(); // 2\n        y = 3;\n        x(); // 3\n    }\n    foo();\n    console.log(y); //1\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被申明为匿名函数变量，此时函数并未被执行，所以正常；之后定义 y 值为 2，此时调用 x() 输出的当然是变量 y 的值，之后继续修改 y 的值，再继续调用 x()，输出 y 最新值 3；当执行外部 console.log(y) 时并不能访问内部函数变量，访问的变量是当前域下的 y = 1 的值 1，所以输出 1；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n            let y = arguments[1] !== (void 0) ? arguments[1] : 2;\n            x(); // 2\n            y = 3;\n            x();    // 3\n        }\n        foo();\n        console.log(y); // 1\n\n        return {};\n    }\n    ```\n\n- 案例三\n    1. 代码\n    ``` javascript\n    let y = 1;\n    function foo(x = function(){console.log(y)}) {\n        let y = 3;\n        x(); // 1\n    }\n    foo();\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，所以输出最外层变量 y 的值 1；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        let y = 1;\n\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n\n            function funBody() {\n                let y = 3;\n                x();\n            }\n            funBody();\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n- 案例四\n    1. 代码\n    ``` javascript\n    function foo(x = function(){console.log(y)}) {\n        let y = 3;\n        x(); // // ReferenceError: y is not defined\n    }\n    foo();\n    ```\n    2. 解读\n        - 当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；\n        - 全局作用域、参数作用域、函数体作用域；\n        - 当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，否则报 y 没有被定义错误，此案例只是案例三的一种测试；\n    3. 代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解\n    ``` javascript\n    function analysis() {\n        \"use strict\";\n        function foo() {  \n            let x = arguments[0] !== (void 0) ? arguments[0] : function() {\n                console.log(y);\n            };\n\n            function funBody() {\n                let y = 3;\n                x();\n            }\n            funBody();\n        }\n        foo();\n\n        return {};\n    }\n    ```\n\n#### 参考\n以上核心部分在代码翻译部分，通过配合一下资料及个人的理解，翻译出通俗易懂的代码：\n- [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let)\n- [http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters](http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters)\n- [https://github.com/google/traceur-compiler/issues/1604](https://github.com/google/traceur-compiler/issues/1604)","slug":"2017-01-22-TDZ","updated":"2017-01-22T07:47:07.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08yi000yc3x1yyj02zk8","content":"<blockquote>\n<p>春节快到了，假期也快到了，空闲之余刷个微博，看见 @ruanyf 提出了一个问题与 TDZ 有关，但是貌似阮大当时还没有意识到这个问题，多亏一些其他业内同仁提出了与 TDZ 相关；当然，以阮大的能力这都不是事。由于当时我本身也还不知道 TDZ 这一回事没有看懂，所以就花了一些时间去搞清楚什么是 TDZ 及TDZ会带来一些什么问题，本文主要是用于介绍我对 TDZ 的一些理解，如有问题，多谢指出。<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><ul>\n<li><p>案例一</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = y, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();  <span class=\"comment\">// ReferenceError: y is not defined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，参数作用域在 x = y 之后才定义 let y，注意：let 定义，所以根据 let 定义变量的作用知道 x = y 肯定会报错；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : y;   <span class=\"comment\">// y not defined</span></div><div class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例二</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;, y = <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    x(); <span class=\"comment\">// 2</span></div><div class=\"line\">    y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// 3</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被申明为匿名函数变量，此时函数并未被执行，所以正常；之后定义 y 值为 2，此时调用 x() 输出的当然是变量 y 的值，之后继续修改 y 的值，再继续调用 x()，输出 y 最新值 3；当执行外部 console.log(y) 时并不能访问内部函数变量，访问的变量是当前域下的 y = 1 的值 1，所以输出 1；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"number\">2</span>;</div><div class=\"line\">        x(); <span class=\"comment\">// 2</span></div><div class=\"line\">        y = <span class=\"number\">3</span>;</div><div class=\"line\">        x();    <span class=\"comment\">// 3</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例三</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// 1</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，所以输出最外层变量 y 的值 1；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funBody</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">            x();</div><div class=\"line\">        &#125;</div><div class=\"line\">        funBody();</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例四</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// // ReferenceError: y is not defined</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，否则报 y 没有被定义错误，此案例只是案例三的一种测试；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funBody</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">            x();</div><div class=\"line\">        &#125;</div><div class=\"line\">        funBody();</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>以上核心部分在代码翻译部分，通过配合一下资料及个人的理解，翻译出通俗易懂的代码：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let</a></li>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters\" target=\"_blank\" rel=\"external\">http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters</a></li>\n<li><a href=\"https://github.com/google/traceur-compiler/issues/1604\" target=\"_blank\" rel=\"external\">https://github.com/google/traceur-compiler/issues/1604</a></li>\n</ul>\n","excerpt":"<blockquote>\n<p>春节快到了，假期也快到了，空闲之余刷个微博，看见 @ruanyf 提出了一个问题与 TDZ 有关，但是貌似阮大当时还没有意识到这个问题，多亏一些其他业内同仁提出了与 TDZ 相关；当然，以阮大的能力这都不是事。由于当时我本身也还不知道 TDZ 这一回事没有看懂，所以就花了一些时间去搞清楚什么是 TDZ 及TDZ会带来一些什么问题，本文主要是用于介绍我对 TDZ 的一些理解，如有问题，多谢指出。<br>","more":"</p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><ul>\n<li><p>案例一</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = y, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();  <span class=\"comment\">// ReferenceError: y is not defined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，参数作用域在 x = y 之后才定义 let y，注意：let 定义，所以根据 let 定义变量的作用知道 x = y 肯定会报错；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : y;   <span class=\"comment\">// y not defined</span></div><div class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例二</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;, y = <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    x(); <span class=\"comment\">// 2</span></div><div class=\"line\">    y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// 3</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被申明为匿名函数变量，此时函数并未被执行，所以正常；之后定义 y 值为 2，此时调用 x() 输出的当然是变量 y 的值，之后继续修改 y 的值，再继续调用 x()，输出 y 最新值 3；当执行外部 console.log(y) 时并不能访问内部函数变量，访问的变量是当前域下的 y = 1 的值 1，所以输出 1；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">let</span> y = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"number\">2</span>;</div><div class=\"line\">        x(); <span class=\"comment\">// 2</span></div><div class=\"line\">        y = <span class=\"number\">3</span>;</div><div class=\"line\">        x();    <span class=\"comment\">// 3</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例三</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// 1</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，所以输出最外层变量 y 的值 1；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funBody</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">            x();</div><div class=\"line\">        &#125;</div><div class=\"line\">        funBody();</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>案例四</p>\n<ol>\n<li><p>代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x = function(</span>)</span>&#123;<span class=\"built_in\">console</span>.log(y)&#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">    x(); <span class=\"comment\">// // ReferenceError: y is not defined</span></div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n</li>\n<li><p>解读</p>\n<ul>\n<li>当函数存在默认参数时，且调用方法不传任何参数，会存在三个作用域环境；</li>\n<li>全局作用域、参数作用域、函数体作用域；</li>\n<li>当执行 foo 函数时，x 被赋值为一个匿名函数的变量，且存在与参数作用域内，let y = 3 会被定义到函数体作用域内，属于参数作用域的内部函数；当 x() 执行时是在函数体作用域定被调用，但是其定义是在参数作用域，所以执行环境是在参数作用域内，此时在参数作用域没有定义 y 变量，也不能访问内部函数 funBody 内部定义的变量 y，此时往上级函数查找是否存在 y 被定义，如果被定义则输出其值，否则报 y 没有被定义错误，此案例只是案例三的一种测试；</li>\n</ul>\n</li>\n<li>代码翻译：将以上代码翻译之后可以按下面代码片段阅读更易于理解<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">analysis</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">let</span> x = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] !== (<span class=\"keyword\">void</span> <span class=\"number\">0</span>) ? <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funBody</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> y = <span class=\"number\">3</span>;</div><div class=\"line\">            x();</div><div class=\"line\">        &#125;</div><div class=\"line\">        funBody();</div><div class=\"line\">    &#125;</div><div class=\"line\">    foo();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>以上核心部分在代码翻译部分，通过配合一下资料及个人的理解，翻译出通俗易懂的代码：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let</a></li>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters\">http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/#tdz-temporal-dead-zone-for-parameters</a></li>\n<li><a href=\"https://github.com/google/traceur-compiler/issues/1604\">https://github.com/google/traceur-compiler/issues/1604</a></li>\n</ul>"},{"layout":"post","title":"line-height 取值方式","date":"2017-03-11T17:30:00.000Z","description":"line-height 取值方式","author":"acrens","published":1,"_content":"\n> 相信很多前端er都使用过 line-height 来设置行高布局。下面看看官方定义：On block level elements, the line-height property specifies the minimum height of line boxes within the element.On non-replaced inline elements, line-height specifies the height that is used to calculate line box height.\n<!-- more -->\n\n### line-height 取值方式\n有时候我们在开发的时候并没有太深入的去了解一个属性，比如：line-height 的不同取值达到的效果并不同，下面依次看看常用的几种取值方式。\n\n----------\n\n#### px 单位取值\nline-height: 26px 目的就是直接定义目标元素的行高为 26px 的高度。\n\n----------\n\n#### % 百分比取值\nline-height: 150% 一般用该方式定义目标元素的行高会配合 font-size: 14px 属性使用，因为用百分比当前元素的行高为 1.5 * 14px = 21px。且如果其层叠子元素没有定义 line-height 属性，不管有没有定义 font-size 属性，其层叠子元素行高均为 21px（与自身的 font-size 没有任何关系）。\n\n----------\n\n#### 倍数取值\nline-height:1.5 用该方式一般也是配合 font:14px 属性使用，但是对层叠子元素的影响效果并不同，如果层叠子元素没有定义 line-height 属性，但是定义了 font-size 属性，那这些层叠子元素的行高为继承过来的 line-height 倍数值乘以自身的 font-size 属性。\n\n----------\n\n#### 总结\n一般情况下，为了更加方便及清晰的使用 line-height，使用倍数取值是最佳的设置方式，如：body {font: 12px/1.5 tahoma,arial,\"\\5b8b\\4f53\"}。","source":"_posts/2017-03-11-lihe-height.md","raw":"---\nlayout: post\ntitle:  \"line-height 取值方式\"\ndate:   2017-03-11 17:30:00 +0800\ncategories: line-height\ntags: \n- css\n- line-height\ndescription: \"line-height 取值方式\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 相信很多前端er都使用过 line-height 来设置行高布局。下面看看官方定义：On block level elements, the line-height property specifies the minimum height of line boxes within the element.On non-replaced inline elements, line-height specifies the height that is used to calculate line box height.\n<!-- more -->\n\n### line-height 取值方式\n有时候我们在开发的时候并没有太深入的去了解一个属性，比如：line-height 的不同取值达到的效果并不同，下面依次看看常用的几种取值方式。\n\n----------\n\n#### px 单位取值\nline-height: 26px 目的就是直接定义目标元素的行高为 26px 的高度。\n\n----------\n\n#### % 百分比取值\nline-height: 150% 一般用该方式定义目标元素的行高会配合 font-size: 14px 属性使用，因为用百分比当前元素的行高为 1.5 * 14px = 21px。且如果其层叠子元素没有定义 line-height 属性，不管有没有定义 font-size 属性，其层叠子元素行高均为 21px（与自身的 font-size 没有任何关系）。\n\n----------\n\n#### 倍数取值\nline-height:1.5 用该方式一般也是配合 font:14px 属性使用，但是对层叠子元素的影响效果并不同，如果层叠子元素没有定义 line-height 属性，但是定义了 font-size 属性，那这些层叠子元素的行高为继承过来的 line-height 倍数值乘以自身的 font-size 属性。\n\n----------\n\n#### 总结\n一般情况下，为了更加方便及清晰的使用 line-height，使用倍数取值是最佳的设置方式，如：body {font: 12px/1.5 tahoma,arial,\"\\5b8b\\4f53\"}。","slug":"2017-03-11-lihe-height","updated":"2017-03-22T14:28:13.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08yq0010c3x1som75210","content":"<blockquote>\n<p>相信很多前端er都使用过 line-height 来设置行高布局。下面看看官方定义：On block level elements, the line-height property specifies the minimum height of line boxes within the element.On non-replaced inline elements, line-height specifies the height that is used to calculate line box height.<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"line-height-取值方式\"><a href=\"#line-height-取值方式\" class=\"headerlink\" title=\"line-height 取值方式\"></a>line-height 取值方式</h3><p>有时候我们在开发的时候并没有太深入的去了解一个属性，比如：line-height 的不同取值达到的效果并不同，下面依次看看常用的几种取值方式。</p>\n<hr>\n<h4 id=\"px-单位取值\"><a href=\"#px-单位取值\" class=\"headerlink\" title=\"px 单位取值\"></a>px 单位取值</h4><p>line-height: 26px 目的就是直接定义目标元素的行高为 26px 的高度。</p>\n<hr>\n<h4 id=\"百分比取值\"><a href=\"#百分比取值\" class=\"headerlink\" title=\"% 百分比取值\"></a>% 百分比取值</h4><p>line-height: 150% 一般用该方式定义目标元素的行高会配合 font-size: 14px 属性使用，因为用百分比当前元素的行高为 1.5 * 14px = 21px。且如果其层叠子元素没有定义 line-height 属性，不管有没有定义 font-size 属性，其层叠子元素行高均为 21px（与自身的 font-size 没有任何关系）。</p>\n<hr>\n<h4 id=\"倍数取值\"><a href=\"#倍数取值\" class=\"headerlink\" title=\"倍数取值\"></a>倍数取值</h4><p>line-height:1.5 用该方式一般也是配合 font:14px 属性使用，但是对层叠子元素的影响效果并不同，如果层叠子元素没有定义 line-height 属性，但是定义了 font-size 属性，那这些层叠子元素的行高为继承过来的 line-height 倍数值乘以自身的 font-size 属性。</p>\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>一般情况下，为了更加方便及清晰的使用 line-height，使用倍数取值是最佳的设置方式，如：body {font: 12px/1.5 tahoma,arial,”\\5b8b\\4f53”}。</p>\n","excerpt":"<blockquote>\n<p>相信很多前端er都使用过 line-height 来设置行高布局。下面看看官方定义：On block level elements, the line-height property specifies the minimum height of line boxes within the element.On non-replaced inline elements, line-height specifies the height that is used to calculate line box height.<br>","more":"</p>\n</blockquote>\n<h3 id=\"line-height-取值方式\"><a href=\"#line-height-取值方式\" class=\"headerlink\" title=\"line-height 取值方式\"></a>line-height 取值方式</h3><p>有时候我们在开发的时候并没有太深入的去了解一个属性，比如：line-height 的不同取值达到的效果并不同，下面依次看看常用的几种取值方式。</p>\n<hr>\n<h4 id=\"px-单位取值\"><a href=\"#px-单位取值\" class=\"headerlink\" title=\"px 单位取值\"></a>px 单位取值</h4><p>line-height: 26px 目的就是直接定义目标元素的行高为 26px 的高度。</p>\n<hr>\n<h4 id=\"百分比取值\"><a href=\"#百分比取值\" class=\"headerlink\" title=\"% 百分比取值\"></a>% 百分比取值</h4><p>line-height: 150% 一般用该方式定义目标元素的行高会配合 font-size: 14px 属性使用，因为用百分比当前元素的行高为 1.5 * 14px = 21px。且如果其层叠子元素没有定义 line-height 属性，不管有没有定义 font-size 属性，其层叠子元素行高均为 21px（与自身的 font-size 没有任何关系）。</p>\n<hr>\n<h4 id=\"倍数取值\"><a href=\"#倍数取值\" class=\"headerlink\" title=\"倍数取值\"></a>倍数取值</h4><p>line-height:1.5 用该方式一般也是配合 font:14px 属性使用，但是对层叠子元素的影响效果并不同，如果层叠子元素没有定义 line-height 属性，但是定义了 font-size 属性，那这些层叠子元素的行高为继承过来的 line-height 倍数值乘以自身的 font-size 属性。</p>\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>一般情况下，为了更加方便及清晰的使用 line-height，使用倍数取值是最佳的设置方式，如：body {font: 12px/1.5 tahoma,arial,”\\5b8b\\4f53”}。</p>"},{"layout":"post","title":"XSS 防御之战","date":"2016-09-11T22:34:00.000Z","description":"XSS 防御之战","author":"acrens","published":1,"_content":"\n> 写这篇文章主要是为了记录下最近项目开发中遇到的一个问题及解决过程；XSS 相信大家都知道，其相关知识就不在这里多讲；本篇文章主要侧重前端在获得后端给予的数据时是如何防御 XSS。 看到这里应该有人会说，后端都已经给你进行了 XSS 过滤，前端还需要做这些干什么，我的答案是：永远不要相信别人给你的东西是和你想要的 100% 一致。\n<!--more-->\n\n### 防御 XSS 攻击\n### 项目场景\n1. 前端基于 RESTful 风格 API 异步获取后端数据；\n2. 数据渲染都是通过 underscore template 渲染页面。\n\n### 解决方案\n封装一个过滤特殊字符【如：<、>、%、@等】全局方法，供渲染数据之前调用。\n\n但是发现项目是通过 underscore template 渲染页面的，想想可以在这里做点手脚；经过一番调研，果真如此，template 提供两种变量获取数据的方式，分别为：<%= variable %>、<%- variable %>。\n1. <%= variable %> 不对数据做任何处理；\n2. <%- variable %> 对数据进行 HTML 转义（即特殊字符转义）。\n\n经过多次尝试，现在有四种选择方案：\n1. <%= variable %> & html(str)\n存在问题：如果后台未进行 XSS 防御，前台过滤无效：\n``` javascript\n$('.J-content').html(_.template('<%=content%>', {content: '<script>alert(1);</script>'}));\n```\n2.  <%= variable %> & text( str)\n存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：\n``` javascript\n$('.J-content').text(_.template('<%=content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n```\n3.   <%- variable %> & html(str)\n存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：\n``` javascript\n$('.J-content').html(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n```\n4.   <%- variable %> & text(str)\n存在问题：不管后台进行还是没进行 XSS 防御，前台展示数据均未还原：\n``` javascript\n$('.J-content').text(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n\n$('.J-content').text(_.template('<%-content%>', {content: '<script>alert(1);</script>'}));\n```\n\n灵机一动的我细心一想上述四种方法不可能不行，后台找到了原因所在，是因为 html 和 text 方法的区别，html 方法渲染页面会讲转义字符转换为 HTML 代码，text 方法渲染页面只是纯粹的内容替换，但是 html 方法只能将 &amp 渲染成单独的 &，所以通过 <%- variable %> 转义 &lt 成 &amp\\;lt 之后再由 html 方法渲染在页面显示为 &lt，所以通过 replace 方法替换所有 &amp，如下代码：\n``` javascript\n$('.J-content').html(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}).replace(/&amp;/g, '&'));\n```","source":"_posts/xss-1.md","raw":"---\nlayout: post\ntitle:  \"XSS 防御之战\"\ndate:   2016-09-11 22:34:00 +0800\ncategories: XSS\ntags: \n- XSS\ndescription: \"XSS 防御之战\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 写这篇文章主要是为了记录下最近项目开发中遇到的一个问题及解决过程；XSS 相信大家都知道，其相关知识就不在这里多讲；本篇文章主要侧重前端在获得后端给予的数据时是如何防御 XSS。 看到这里应该有人会说，后端都已经给你进行了 XSS 过滤，前端还需要做这些干什么，我的答案是：永远不要相信别人给你的东西是和你想要的 100% 一致。\n<!--more-->\n\n### 防御 XSS 攻击\n### 项目场景\n1. 前端基于 RESTful 风格 API 异步获取后端数据；\n2. 数据渲染都是通过 underscore template 渲染页面。\n\n### 解决方案\n封装一个过滤特殊字符【如：<、>、%、@等】全局方法，供渲染数据之前调用。\n\n但是发现项目是通过 underscore template 渲染页面的，想想可以在这里做点手脚；经过一番调研，果真如此，template 提供两种变量获取数据的方式，分别为：<%= variable %>、<%- variable %>。\n1. <%= variable %> 不对数据做任何处理；\n2. <%- variable %> 对数据进行 HTML 转义（即特殊字符转义）。\n\n经过多次尝试，现在有四种选择方案：\n1. <%= variable %> & html(str)\n存在问题：如果后台未进行 XSS 防御，前台过滤无效：\n``` javascript\n$('.J-content').html(_.template('<%=content%>', {content: '<script>alert(1);</script>'}));\n```\n2.  <%= variable %> & text( str)\n存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：\n``` javascript\n$('.J-content').text(_.template('<%=content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n```\n3.   <%- variable %> & html(str)\n存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：\n``` javascript\n$('.J-content').html(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n```\n4.   <%- variable %> & text(str)\n存在问题：不管后台进行还是没进行 XSS 防御，前台展示数据均未还原：\n``` javascript\n$('.J-content').text(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}));\n\n$('.J-content').text(_.template('<%-content%>', {content: '<script>alert(1);</script>'}));\n```\n\n灵机一动的我细心一想上述四种方法不可能不行，后台找到了原因所在，是因为 html 和 text 方法的区别，html 方法渲染页面会讲转义字符转换为 HTML 代码，text 方法渲染页面只是纯粹的内容替换，但是 html 方法只能将 &amp 渲染成单独的 &，所以通过 <%- variable %> 转义 &lt 成 &amp\\;lt 之后再由 html 方法渲染在页面显示为 &lt，所以通过 replace 方法替换所有 &amp，如下代码：\n``` javascript\n$('.J-content').html(_.template('<%-content%>', {content: '&lt;script&gt;alert(1);&lt;/script&gt;'}).replace(/&amp;/g, '&'));\n```","slug":"xss-1","updated":"2016-09-13T11:53:34.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08yw0014c3x1fey3p1wf","content":"<blockquote>\n<p>写这篇文章主要是为了记录下最近项目开发中遇到的一个问题及解决过程；XSS 相信大家都知道，其相关知识就不在这里多讲；本篇文章主要侧重前端在获得后端给予的数据时是如何防御 XSS。 看到这里应该有人会说，后端都已经给你进行了 XSS 过滤，前端还需要做这些干什么，我的答案是：永远不要相信别人给你的东西是和你想要的 100% 一致。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"防御-XSS-攻击\"><a href=\"#防御-XSS-攻击\" class=\"headerlink\" title=\"防御 XSS 攻击\"></a>防御 XSS 攻击</h3><h3 id=\"项目场景\"><a href=\"#项目场景\" class=\"headerlink\" title=\"项目场景\"></a>项目场景</h3><ol>\n<li>前端基于 RESTful 风格 API 异步获取后端数据；</li>\n<li>数据渲染都是通过 underscore template 渲染页面。</li>\n</ol>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>封装一个过滤特殊字符【如：&lt;、&gt;、%、@等】全局方法，供渲染数据之前调用。</p>\n<p>但是发现项目是通过 underscore template 渲染页面的，想想可以在这里做点手脚；经过一番调研，果真如此，template 提供两种变量获取数据的方式，分别为：&lt;%= variable %&gt;、&lt;%- variable %&gt;。</p>\n<ol>\n<li>&lt;%= variable %&gt; 不对数据做任何处理；</li>\n<li>&lt;%- variable %&gt; 对数据进行 HTML 转义（即特殊字符转义）。</li>\n</ol>\n<p>经过多次尝试，现在有四种选择方案：</p>\n<ol>\n<li><p>&lt;%= variable %&gt; &amp; html(str)<br>存在问题：如果后台未进行 XSS 防御，前台过滤无效：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%=content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&lt;script&gt;alert(1);&lt;/script&gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%= variable %&gt; &amp; text( str)<br>存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%=content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%- variable %&gt; &amp; html(str)<br>存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%- variable %&gt; &amp; text(str)<br>存在问题：不管后台进行还是没进行 XSS 防御，前台展示数据均未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&lt;script&gt;alert(1);&lt;/script&gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>灵机一动的我细心一想上述四种方法不可能不行，后台找到了原因所在，是因为 html 和 text 方法的区别，html 方法渲染页面会讲转义字符转换为 HTML 代码，text 方法渲染页面只是纯粹的内容替换，但是 html 方法只能将 &amp;amp 渲染成单独的 &amp;，所以通过 &lt;%- variable %&gt; 转义 &amp;lt 成 &amp;amp\\;lt 之后再由 html 方法渲染在页面显示为 &amp;lt，所以通过 replace 方法替换所有 &amp;amp，如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;).replace(<span class=\"regexp\">/&amp;amp;/g</span>, <span class=\"string\">'&amp;'</span>));</div></pre></td></tr></table></figure></p>\n","excerpt":"<blockquote>\n<p>写这篇文章主要是为了记录下最近项目开发中遇到的一个问题及解决过程；XSS 相信大家都知道，其相关知识就不在这里多讲；本篇文章主要侧重前端在获得后端给予的数据时是如何防御 XSS。 看到这里应该有人会说，后端都已经给你进行了 XSS 过滤，前端还需要做这些干什么，我的答案是：永远不要相信别人给你的东西是和你想要的 100% 一致。<br>","more":"</p>\n</blockquote>\n<h3 id=\"防御-XSS-攻击\"><a href=\"#防御-XSS-攻击\" class=\"headerlink\" title=\"防御 XSS 攻击\"></a>防御 XSS 攻击</h3><h3 id=\"项目场景\"><a href=\"#项目场景\" class=\"headerlink\" title=\"项目场景\"></a>项目场景</h3><ol>\n<li>前端基于 RESTful 风格 API 异步获取后端数据；</li>\n<li>数据渲染都是通过 underscore template 渲染页面。</li>\n</ol>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>封装一个过滤特殊字符【如：&lt;、&gt;、%、@等】全局方法，供渲染数据之前调用。</p>\n<p>但是发现项目是通过 underscore template 渲染页面的，想想可以在这里做点手脚；经过一番调研，果真如此，template 提供两种变量获取数据的方式，分别为：&lt;%= variable %&gt;、&lt;%- variable %&gt;。</p>\n<ol>\n<li>&lt;%= variable %&gt; 不对数据做任何处理；</li>\n<li>&lt;%- variable %&gt; 对数据进行 HTML 转义（即特殊字符转义）。</li>\n</ol>\n<p>经过多次尝试，现在有四种选择方案：</p>\n<ol>\n<li><p>&lt;%= variable %&gt; &amp; html(str)<br>存在问题：如果后台未进行 XSS 防御，前台过滤无效：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%=content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&lt;script&gt;alert(1);&lt;/script&gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%= variable %&gt; &amp; text( str)<br>存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%=content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%- variable %&gt; &amp; html(str)<br>存在问题：如果后台进行了 XSS 防御，前台展示数据未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n<li><p>&lt;%- variable %&gt; &amp; text(str)<br>存在问题：不管后台进行还是没进行 XSS 防御，前台展示数据均未还原：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;));</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).text(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&lt;script&gt;alert(1);&lt;/script&gt;'</span>&#125;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>灵机一动的我细心一想上述四种方法不可能不行，后台找到了原因所在，是因为 html 和 text 方法的区别，html 方法渲染页面会讲转义字符转换为 HTML 代码，text 方法渲染页面只是纯粹的内容替换，但是 html 方法只能将 &amp;amp 渲染成单独的 &amp;，所以通过 &lt;%- variable %&gt; 转义 &amp;lt 成 &amp;amp\\;lt 之后再由 html 方法渲染在页面显示为 &amp;lt，所以通过 replace 方法替换所有 &amp;amp，如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'.J-content'</span>).html(_.template(<span class=\"string\">'&lt;%-content%&gt;'</span>, &#123;<span class=\"attr\">content</span>: <span class=\"string\">'&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;'</span>&#125;).replace(<span class=\"regexp\">/&amp;amp;/g</span>, <span class=\"string\">'&amp;'</span>));</div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"浏览器渲染那些事之 Reflow、Repaint","date":"2017-03-22T22:09:00.000Z","description":"Reflow、Repaint是什么，如何触发Reflow、Repaint，如何避免Reflow、Repaint","author":"acrens","published":1,"_content":"\n> 在进行网页开发的时候，一般会忽略到页面渲染给浏览器带来的性能问题；在实际情况中，浏览器进行页面渲染会进行大量的计算，来确定每个可见元素在屏幕上的精确位置、大小，还需要将每个确定好的像素绘制到屏幕上，这些操作都需要消耗大量的资源；如果反复的进行这些操作，对用户设备性能损耗不容乐观，因此希望通过这篇文章加深大家对浏览器渲染过程的理解，并希望大家能够重视渲染过程带来的性能问题。\n<!-- more -->\n\n### 浏览器渲染那些事之 Reflow、Repaint\n\n#### 浏览器内核（渲染引擎）\n在各个浏览器厂商你追我赶的形势下，截止今日，产生了很多不同的浏览器，各个浏览器本质大同小异，核心部分基本相似，由渲染引擎和 JS 引擎组成。当你在访问网站页面的时候，浏览器做了很多事情，从发送请求，到解析 HTML 源码，构建渲染树，最后将内容像素绘制到设备屏幕上，一步步完成用户最终需要的场景。然而，在浏览器完成整个渲染的过程中，最为核心的就是“渲染引擎”。以下分别列出一些主流浏览器的渲染引擎：\n- [chrome](http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html) - webkit\n- [safari](http://www.apple.com/cn/safari/) - webkit\n- [opera](http://www.opera.com/zh-cn) - webkit（早期是 presto）\n- [firefox](https://www.mozilla.org/en-US/firefox/products/) - gecko\n- [ie](https://support.microsoft.com/zh-tw/help/17621/internet-explorer-downloads) - trident\n\n#### 渲染流程\n结合浏览器渲染原理，来剖析以下代码渲染构建过程：\n1. HTML 源码：\n``` html\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title>browser rendering</title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"awesome-photo.jpg\"></div>\n  </body>\n</html>\n```\n2. CSS 源码：\n``` css\nbody { font-size: 16px }\np { font-weight: bold }\nspan { color: red }\np span { display: none }\nimg { float: right }\n```\n3. 该图为以上源代码构建树：\n![构建渲染树](/css/images/render-tree-construction.png)\n\n浏览器渲染页面整个过程描述：\n1. 首先，解析 HTML Source，构建 DOM Tree；\n2. 同时，解析 CSS Style，构建 CSSOM Tree；\n3. 然后，组合 DOM Tree 与 CSSOM Tree，去除不可见元素，构建 Render Tree；\n4. 再执行 Reflow，根据 Render Tree 计算每个可见元素的布局（几何属性）；\n5. 最后，执行 Repaint，通过绘制流程，将每个像素渲染到屏幕上。\n\n注意：\n1. Render Tree 只包含渲染网页所需要的节点；\n2. Reflow 过程是布局计算每个对象的精确位置和大小；\n3. Repaint 过程则是将 Render Tree 的每个像素渲染到屏幕上。\n\n#### 哪些阶段影响渲染效率\n我们都知道，网页是需要挂载在客户端的浏览器上运行，但是随着互联网的快速发展，为保证用户访问应用的流畅性，往往对客户端的设备配置要求较高。然而，对于用户的设备，我们是无法控制；因此，作为一名开发者，就需要找到除了用户设备配置之外导致访问不流畅的问题，下面就从渲染流程中找到影响性能的问题。\n\n浏览器初始化渲染时会执行一次 Reflow 过程，这个过程主要是用来确定页面上每个元素在屏幕上的几何位置属性。但是，每执行一次 Reflow 会需要花费大量的时间，耗费大量的设备资源，所以尽量避免执行 Reflow 过程。同时，执行完 Reflow 都会伴随着一次 Repaint 过程，这个过程也会耗费大量的计算机资源，严重影响页面的渲染性能。所以，在浏览器渲染阶段，主要影响页面渲染的阶段是 Reflow 和 Repaint 过程，因此在编写代码时应该尽量避免 Reflow 和 Repaint 过程的执行，如：避免在 JS 代码里直接改变元素的几何属性。\n\n#### reflow & repaint 简介\n1. reflow 在渲染过程中称为回流，发生在 Render Tree 阶段，它主要是用来确定每个元素在屏幕上的几何属性，需要大量计算每个元素的位置。在代码里每改变一个元素的几何属性，均会发生一次回流过程。\n\n2. repaint 在渲染过程中称为重绘，发生在 reflow 过程之后，当元素的几何属性确定之后便要开始将元素绘制在屏幕上展示。repaint 执行过程就是将元素的颜色、背景等属性绘制出来。在代码里没改变一次元素的颜色等属性时均会对相关元素执行一次重绘。\n\n#### 如何触发 reflow 和 repaint 过程\n1. 改变元素 font-size：\n``` javascript\ndocument.getElementsByTagName('body')[0].style.fontSize = '20px'; // reflow,repaint\n```\n2. 改变元素盒模型margin、border、padding、width：\n``` javascript\nlet styles = document.getElementsByTagName('body')[0].style;\nstyles.margin = '40px'; // reflow,repaint\nstyles.border = '40px solid #f00'; // reflow,repaint\nstyles.padding = '40px'; // reflow,repaint\nstyles.width = '300px'; // reflow,repaint\n```\n3. 改变元素颜色、背景色属性：\n``` javascript\nlet styles = document.getElementsByTagName('body')[0].style;\nstyles.color = '#fff'; // repaint\nstyles.backgroundColor = '#f00'; // repaint\n```\n4. 特殊：offset*、scroll*、client*、getComputedStyle、currentStyle：\n- 由于浏览器在处理批量修改页面元素样式时，会将批量操作缓存起来，然后再做一次 reflow 过程（异步 reflow），避免每次操作都执行 reflow 消耗资源。但是如果在某个操作之后立马调用了以上执行属性，为了等够得到最新的样式，会检查缓存的操作，是否需要 reflow，这样就 flush 出最新的样式。\n\n#### 如何减少 reflow 和 repaint 过程\n1. 减少 JS 逐行修改元素样式：\n``` javascript\nlet body = document.getElementsByTagName('body')[0];\nbody.className += ' class-name';\n```\n2. 离线处理 DOM 操作：\n    - 通过 documentFragment 集中处理临时操作；\n    - 克隆节点进行操作，然后进行原节点替换；\n    - 使用 display:none; 进行批量操作。\n    \n3. 减少样式的重新计算，即减少 offset*、scroll*、client*、getComputedStyle、currentStyle 的使用，因为每次调用都会刷新操作缓冲区，执行 reflow & repaint。\n\n#### 参考资料\n- [渲染性能](https://developers.google.com/web/fundamentals/performance/rendering/)；\n- [Rendering: repaint, reflow/relayout, restyle](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/) - [译文](http://www.cnblogs.com/ihardcoder/p/3927709.html)；\n- [浏览器的渲染原理简介](http://coolshell.cn/articles/9666.html)；\n- [分析运行时性能](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/)；\n- [如何使用 Timeline 工具](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-js)。","source":"_posts/2017-03-22-reflow&repaint.md","raw":"---\nlayout: post\ntitle:  \"浏览器渲染那些事之 Reflow、Repaint\"\ndate:   2017-03-22 22:09:00 +0800\ncategories: 浏览器渲染\ntags: \n- Reflow\n- Repaint\ndescription: \"Reflow、Repaint是什么，如何触发Reflow、Repaint，如何避免Reflow、Repaint\"\nauthor: \"acrens\"\npublished: true\n---\n\n> 在进行网页开发的时候，一般会忽略到页面渲染给浏览器带来的性能问题；在实际情况中，浏览器进行页面渲染会进行大量的计算，来确定每个可见元素在屏幕上的精确位置、大小，还需要将每个确定好的像素绘制到屏幕上，这些操作都需要消耗大量的资源；如果反复的进行这些操作，对用户设备性能损耗不容乐观，因此希望通过这篇文章加深大家对浏览器渲染过程的理解，并希望大家能够重视渲染过程带来的性能问题。\n<!-- more -->\n\n### 浏览器渲染那些事之 Reflow、Repaint\n\n#### 浏览器内核（渲染引擎）\n在各个浏览器厂商你追我赶的形势下，截止今日，产生了很多不同的浏览器，各个浏览器本质大同小异，核心部分基本相似，由渲染引擎和 JS 引擎组成。当你在访问网站页面的时候，浏览器做了很多事情，从发送请求，到解析 HTML 源码，构建渲染树，最后将内容像素绘制到设备屏幕上，一步步完成用户最终需要的场景。然而，在浏览器完成整个渲染的过程中，最为核心的就是“渲染引擎”。以下分别列出一些主流浏览器的渲染引擎：\n- [chrome](http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html) - webkit\n- [safari](http://www.apple.com/cn/safari/) - webkit\n- [opera](http://www.opera.com/zh-cn) - webkit（早期是 presto）\n- [firefox](https://www.mozilla.org/en-US/firefox/products/) - gecko\n- [ie](https://support.microsoft.com/zh-tw/help/17621/internet-explorer-downloads) - trident\n\n#### 渲染流程\n结合浏览器渲染原理，来剖析以下代码渲染构建过程：\n1. HTML 源码：\n``` html\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title>browser rendering</title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"awesome-photo.jpg\"></div>\n  </body>\n</html>\n```\n2. CSS 源码：\n``` css\nbody { font-size: 16px }\np { font-weight: bold }\nspan { color: red }\np span { display: none }\nimg { float: right }\n```\n3. 该图为以上源代码构建树：\n![构建渲染树](/css/images/render-tree-construction.png)\n\n浏览器渲染页面整个过程描述：\n1. 首先，解析 HTML Source，构建 DOM Tree；\n2. 同时，解析 CSS Style，构建 CSSOM Tree；\n3. 然后，组合 DOM Tree 与 CSSOM Tree，去除不可见元素，构建 Render Tree；\n4. 再执行 Reflow，根据 Render Tree 计算每个可见元素的布局（几何属性）；\n5. 最后，执行 Repaint，通过绘制流程，将每个像素渲染到屏幕上。\n\n注意：\n1. Render Tree 只包含渲染网页所需要的节点；\n2. Reflow 过程是布局计算每个对象的精确位置和大小；\n3. Repaint 过程则是将 Render Tree 的每个像素渲染到屏幕上。\n\n#### 哪些阶段影响渲染效率\n我们都知道，网页是需要挂载在客户端的浏览器上运行，但是随着互联网的快速发展，为保证用户访问应用的流畅性，往往对客户端的设备配置要求较高。然而，对于用户的设备，我们是无法控制；因此，作为一名开发者，就需要找到除了用户设备配置之外导致访问不流畅的问题，下面就从渲染流程中找到影响性能的问题。\n\n浏览器初始化渲染时会执行一次 Reflow 过程，这个过程主要是用来确定页面上每个元素在屏幕上的几何位置属性。但是，每执行一次 Reflow 会需要花费大量的时间，耗费大量的设备资源，所以尽量避免执行 Reflow 过程。同时，执行完 Reflow 都会伴随着一次 Repaint 过程，这个过程也会耗费大量的计算机资源，严重影响页面的渲染性能。所以，在浏览器渲染阶段，主要影响页面渲染的阶段是 Reflow 和 Repaint 过程，因此在编写代码时应该尽量避免 Reflow 和 Repaint 过程的执行，如：避免在 JS 代码里直接改变元素的几何属性。\n\n#### reflow & repaint 简介\n1. reflow 在渲染过程中称为回流，发生在 Render Tree 阶段，它主要是用来确定每个元素在屏幕上的几何属性，需要大量计算每个元素的位置。在代码里每改变一个元素的几何属性，均会发生一次回流过程。\n\n2. repaint 在渲染过程中称为重绘，发生在 reflow 过程之后，当元素的几何属性确定之后便要开始将元素绘制在屏幕上展示。repaint 执行过程就是将元素的颜色、背景等属性绘制出来。在代码里没改变一次元素的颜色等属性时均会对相关元素执行一次重绘。\n\n#### 如何触发 reflow 和 repaint 过程\n1. 改变元素 font-size：\n``` javascript\ndocument.getElementsByTagName('body')[0].style.fontSize = '20px'; // reflow,repaint\n```\n2. 改变元素盒模型margin、border、padding、width：\n``` javascript\nlet styles = document.getElementsByTagName('body')[0].style;\nstyles.margin = '40px'; // reflow,repaint\nstyles.border = '40px solid #f00'; // reflow,repaint\nstyles.padding = '40px'; // reflow,repaint\nstyles.width = '300px'; // reflow,repaint\n```\n3. 改变元素颜色、背景色属性：\n``` javascript\nlet styles = document.getElementsByTagName('body')[0].style;\nstyles.color = '#fff'; // repaint\nstyles.backgroundColor = '#f00'; // repaint\n```\n4. 特殊：offset*、scroll*、client*、getComputedStyle、currentStyle：\n- 由于浏览器在处理批量修改页面元素样式时，会将批量操作缓存起来，然后再做一次 reflow 过程（异步 reflow），避免每次操作都执行 reflow 消耗资源。但是如果在某个操作之后立马调用了以上执行属性，为了等够得到最新的样式，会检查缓存的操作，是否需要 reflow，这样就 flush 出最新的样式。\n\n#### 如何减少 reflow 和 repaint 过程\n1. 减少 JS 逐行修改元素样式：\n``` javascript\nlet body = document.getElementsByTagName('body')[0];\nbody.className += ' class-name';\n```\n2. 离线处理 DOM 操作：\n    - 通过 documentFragment 集中处理临时操作；\n    - 克隆节点进行操作，然后进行原节点替换；\n    - 使用 display:none; 进行批量操作。\n    \n3. 减少样式的重新计算，即减少 offset*、scroll*、client*、getComputedStyle、currentStyle 的使用，因为每次调用都会刷新操作缓冲区，执行 reflow & repaint。\n\n#### 参考资料\n- [渲染性能](https://developers.google.com/web/fundamentals/performance/rendering/)；\n- [Rendering: repaint, reflow/relayout, restyle](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/) - [译文](http://www.cnblogs.com/ihardcoder/p/3927709.html)；\n- [浏览器的渲染原理简介](http://coolshell.cn/articles/9666.html)；\n- [分析运行时性能](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/)；\n- [如何使用 Timeline 工具](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-js)。","slug":"2017-03-22-reflow&repaint","updated":"2017-03-26T14:44:46.000Z","comments":1,"photos":[],"link":"","_id":"cj0qt08z10016c3x17i3u33hz","content":"<blockquote>\n<p>在进行网页开发的时候，一般会忽略到页面渲染给浏览器带来的性能问题；在实际情况中，浏览器进行页面渲染会进行大量的计算，来确定每个可见元素在屏幕上的精确位置、大小，还需要将每个确定好的像素绘制到屏幕上，这些操作都需要消耗大量的资源；如果反复的进行这些操作，对用户设备性能损耗不容乐观，因此希望通过这篇文章加深大家对浏览器渲染过程的理解，并希望大家能够重视渲染过程带来的性能问题。<br><a id=\"more\"></a></p>\n</blockquote>\n<h3 id=\"浏览器渲染那些事之-Reflow、Repaint\"><a href=\"#浏览器渲染那些事之-Reflow、Repaint\" class=\"headerlink\" title=\"浏览器渲染那些事之 Reflow、Repaint\"></a>浏览器渲染那些事之 Reflow、Repaint</h3><h4 id=\"浏览器内核（渲染引擎）\"><a href=\"#浏览器内核（渲染引擎）\" class=\"headerlink\" title=\"浏览器内核（渲染引擎）\"></a>浏览器内核（渲染引擎）</h4><p>在各个浏览器厂商你追我赶的形势下，截止今日，产生了很多不同的浏览器，各个浏览器本质大同小异，核心部分基本相似，由渲染引擎和 JS 引擎组成。当你在访问网站页面的时候，浏览器做了很多事情，从发送请求，到解析 HTML 源码，构建渲染树，最后将内容像素绘制到设备屏幕上，一步步完成用户最终需要的场景。然而，在浏览器完成整个渲染的过程中，最为核心的就是“渲染引擎”。以下分别列出一些主流浏览器的渲染引擎：</p>\n<ul>\n<li><a href=\"http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">chrome</a> - webkit</li>\n<li><a href=\"http://www.apple.com/cn/safari/\" target=\"_blank\" rel=\"external\">safari</a> - webkit</li>\n<li><a href=\"http://www.opera.com/zh-cn\" target=\"_blank\" rel=\"external\">opera</a> - webkit（早期是 presto）</li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/products/\" target=\"_blank\" rel=\"external\">firefox</a> - gecko</li>\n<li><a href=\"https://support.microsoft.com/zh-tw/help/17621/internet-explorer-downloads\" target=\"_blank\" rel=\"external\">ie</a> - trident</li>\n</ul>\n<h4 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h4><p>结合浏览器渲染原理，来剖析以下代码渲染构建过程：</p>\n<ol>\n<li><p>HTML 源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>browser rendering<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>web performance<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> students!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"awesome-photo.jpg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>CSS 源码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-weight</span>: bold &#125;</div><div class=\"line\"><span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">color</span>: red &#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: none &#125;</div><div class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">float</span>: right &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>该图为以上源代码构建树：<br><img src=\"/css/images/render-tree-construction.png\" alt=\"构建渲染树\"></p>\n</li>\n</ol>\n<p>浏览器渲染页面整个过程描述：</p>\n<ol>\n<li>首先，解析 HTML Source，构建 DOM Tree；</li>\n<li>同时，解析 CSS Style，构建 CSSOM Tree；</li>\n<li>然后，组合 DOM Tree 与 CSSOM Tree，去除不可见元素，构建 Render Tree；</li>\n<li>再执行 Reflow，根据 Render Tree 计算每个可见元素的布局（几何属性）；</li>\n<li>最后，执行 Repaint，通过绘制流程，将每个像素渲染到屏幕上。</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>Render Tree 只包含渲染网页所需要的节点；</li>\n<li>Reflow 过程是布局计算每个对象的精确位置和大小；</li>\n<li>Repaint 过程则是将 Render Tree 的每个像素渲染到屏幕上。</li>\n</ol>\n<h4 id=\"哪些阶段影响渲染效率\"><a href=\"#哪些阶段影响渲染效率\" class=\"headerlink\" title=\"哪些阶段影响渲染效率\"></a>哪些阶段影响渲染效率</h4><p>我们都知道，网页是需要挂载在客户端的浏览器上运行，但是随着互联网的快速发展，为保证用户访问应用的流畅性，往往对客户端的设备配置要求较高。然而，对于用户的设备，我们是无法控制；因此，作为一名开发者，就需要找到除了用户设备配置之外导致访问不流畅的问题，下面就从渲染流程中找到影响性能的问题。</p>\n<p>浏览器初始化渲染时会执行一次 Reflow 过程，这个过程主要是用来确定页面上每个元素在屏幕上的几何位置属性。但是，每执行一次 Reflow 会需要花费大量的时间，耗费大量的设备资源，所以尽量避免执行 Reflow 过程。同时，执行完 Reflow 都会伴随着一次 Repaint 过程，这个过程也会耗费大量的计算机资源，严重影响页面的渲染性能。所以，在浏览器渲染阶段，主要影响页面渲染的阶段是 Reflow 和 Repaint 过程，因此在编写代码时应该尽量避免 Reflow 和 Repaint 过程的执行，如：避免在 JS 代码里直接改变元素的几何属性。</p>\n<h4 id=\"reflow-amp-repaint-简介\"><a href=\"#reflow-amp-repaint-简介\" class=\"headerlink\" title=\"reflow &amp; repaint 简介\"></a>reflow &amp; repaint 简介</h4><ol>\n<li><p>reflow 在渲染过程中称为回流，发生在 Render Tree 阶段，它主要是用来确定每个元素在屏幕上的几何属性，需要大量计算每个元素的位置。在代码里每改变一个元素的几何属性，均会发生一次回流过程。</p>\n</li>\n<li><p>repaint 在渲染过程中称为重绘，发生在 reflow 过程之后，当元素的几何属性确定之后便要开始将元素绘制在屏幕上展示。repaint 执行过程就是将元素的颜色、背景等属性绘制出来。在代码里没改变一次元素的颜色等属性时均会对相关元素执行一次重绘。</p>\n</li>\n</ol>\n<h4 id=\"如何触发-reflow-和-repaint-过程\"><a href=\"#如何触发-reflow-和-repaint-过程\" class=\"headerlink\" title=\"如何触发 reflow 和 repaint 过程\"></a>如何触发 reflow 和 repaint 过程</h4><ol>\n<li><p>改变元素 font-size：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style.fontSize = <span class=\"string\">'20px'</span>; <span class=\"comment\">// reflow,repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>改变元素盒模型margin、border、padding、width：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> styles = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style;</div><div class=\"line\">styles.margin = <span class=\"string\">'40px'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.border = <span class=\"string\">'40px solid #f00'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.padding = <span class=\"string\">'40px'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.width = <span class=\"string\">'300px'</span>; <span class=\"comment\">// reflow,repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>改变元素颜色、背景色属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> styles = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style;</div><div class=\"line\">styles.color = <span class=\"string\">'#fff'</span>; <span class=\"comment\">// repaint</span></div><div class=\"line\">styles.backgroundColor = <span class=\"string\">'#f00'</span>; <span class=\"comment\">// repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊：offset<em>、scroll</em>、client*、getComputedStyle、currentStyle：</p>\n</li>\n</ol>\n<ul>\n<li>由于浏览器在处理批量修改页面元素样式时，会将批量操作缓存起来，然后再做一次 reflow 过程（异步 reflow），避免每次操作都执行 reflow 消耗资源。但是如果在某个操作之后立马调用了以上执行属性，为了等够得到最新的样式，会检查缓存的操作，是否需要 reflow，这样就 flush 出最新的样式。</li>\n</ul>\n<h4 id=\"如何减少-reflow-和-repaint-过程\"><a href=\"#如何减少-reflow-和-repaint-过程\" class=\"headerlink\" title=\"如何减少 reflow 和 repaint 过程\"></a>如何减少 reflow 和 repaint 过程</h4><ol>\n<li><p>减少 JS 逐行修改元素样式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">body.className += <span class=\"string\">' class-name'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>离线处理 DOM 操作：</p>\n<ul>\n<li>通过 documentFragment 集中处理临时操作；</li>\n<li>克隆节点进行操作，然后进行原节点替换；</li>\n<li>使用 display:none; 进行批量操作。</li>\n</ul>\n</li>\n<li><p>减少样式的重新计算，即减少 offset<em>、scroll</em>、client*、getComputedStyle、currentStyle 的使用，因为每次调用都会刷新操作缓冲区，执行 reflow &amp; repaint。</p>\n</li>\n</ol>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/\" target=\"_blank\" rel=\"external\">渲染性能</a>；</li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\" target=\"_blank\" rel=\"external\">Rendering: repaint, reflow/relayout, restyle</a> - <a href=\"http://www.cnblogs.com/ihardcoder/p/3927709.html\" target=\"_blank\" rel=\"external\">译文</a>；</li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\" target=\"_blank\" rel=\"external\">浏览器的渲染原理简介</a>；</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/\" target=\"_blank\" rel=\"external\">分析运行时性能</a>；</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-js\" target=\"_blank\" rel=\"external\">如何使用 Timeline 工具</a>。</li>\n</ul>\n","excerpt":"<blockquote>\n<p>在进行网页开发的时候，一般会忽略到页面渲染给浏览器带来的性能问题；在实际情况中，浏览器进行页面渲染会进行大量的计算，来确定每个可见元素在屏幕上的精确位置、大小，还需要将每个确定好的像素绘制到屏幕上，这些操作都需要消耗大量的资源；如果反复的进行这些操作，对用户设备性能损耗不容乐观，因此希望通过这篇文章加深大家对浏览器渲染过程的理解，并希望大家能够重视渲染过程带来的性能问题。<br>","more":"</p>\n</blockquote>\n<h3 id=\"浏览器渲染那些事之-Reflow、Repaint\"><a href=\"#浏览器渲染那些事之-Reflow、Repaint\" class=\"headerlink\" title=\"浏览器渲染那些事之 Reflow、Repaint\"></a>浏览器渲染那些事之 Reflow、Repaint</h3><h4 id=\"浏览器内核（渲染引擎）\"><a href=\"#浏览器内核（渲染引擎）\" class=\"headerlink\" title=\"浏览器内核（渲染引擎）\"></a>浏览器内核（渲染引擎）</h4><p>在各个浏览器厂商你追我赶的形势下，截止今日，产生了很多不同的浏览器，各个浏览器本质大同小异，核心部分基本相似，由渲染引擎和 JS 引擎组成。当你在访问网站页面的时候，浏览器做了很多事情，从发送请求，到解析 HTML 源码，构建渲染树，最后将内容像素绘制到设备屏幕上，一步步完成用户最终需要的场景。然而，在浏览器完成整个渲染的过程中，最为核心的就是“渲染引擎”。以下分别列出一些主流浏览器的渲染引擎：</p>\n<ul>\n<li><a href=\"http://www.google.cn/intl/zh-CN/chrome/browser/desktop/index.html\">chrome</a> - webkit</li>\n<li><a href=\"http://www.apple.com/cn/safari/\">safari</a> - webkit</li>\n<li><a href=\"http://www.opera.com/zh-cn\">opera</a> - webkit（早期是 presto）</li>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/products/\">firefox</a> - gecko</li>\n<li><a href=\"https://support.microsoft.com/zh-tw/help/17621/internet-explorer-downloads\">ie</a> - trident</li>\n</ul>\n<h4 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h4><p>结合浏览器渲染原理，来剖析以下代码渲染构建过程：</p>\n<ol>\n<li><p>HTML 源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>browser rendering<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>web performance<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> students!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"awesome-photo.jpg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>CSS 源码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-weight</span>: bold &#125;</div><div class=\"line\"><span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">color</span>: red &#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: none &#125;</div><div class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">float</span>: right &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>该图为以上源代码构建树：<br><img src=\"/css/images/render-tree-construction.png\" alt=\"构建渲染树\"></p>\n</li>\n</ol>\n<p>浏览器渲染页面整个过程描述：</p>\n<ol>\n<li>首先，解析 HTML Source，构建 DOM Tree；</li>\n<li>同时，解析 CSS Style，构建 CSSOM Tree；</li>\n<li>然后，组合 DOM Tree 与 CSSOM Tree，去除不可见元素，构建 Render Tree；</li>\n<li>再执行 Reflow，根据 Render Tree 计算每个可见元素的布局（几何属性）；</li>\n<li>最后，执行 Repaint，通过绘制流程，将每个像素渲染到屏幕上。</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>Render Tree 只包含渲染网页所需要的节点；</li>\n<li>Reflow 过程是布局计算每个对象的精确位置和大小；</li>\n<li>Repaint 过程则是将 Render Tree 的每个像素渲染到屏幕上。</li>\n</ol>\n<h4 id=\"哪些阶段影响渲染效率\"><a href=\"#哪些阶段影响渲染效率\" class=\"headerlink\" title=\"哪些阶段影响渲染效率\"></a>哪些阶段影响渲染效率</h4><p>我们都知道，网页是需要挂载在客户端的浏览器上运行，但是随着互联网的快速发展，为保证用户访问应用的流畅性，往往对客户端的设备配置要求较高。然而，对于用户的设备，我们是无法控制；因此，作为一名开发者，就需要找到除了用户设备配置之外导致访问不流畅的问题，下面就从渲染流程中找到影响性能的问题。</p>\n<p>浏览器初始化渲染时会执行一次 Reflow 过程，这个过程主要是用来确定页面上每个元素在屏幕上的几何位置属性。但是，每执行一次 Reflow 会需要花费大量的时间，耗费大量的设备资源，所以尽量避免执行 Reflow 过程。同时，执行完 Reflow 都会伴随着一次 Repaint 过程，这个过程也会耗费大量的计算机资源，严重影响页面的渲染性能。所以，在浏览器渲染阶段，主要影响页面渲染的阶段是 Reflow 和 Repaint 过程，因此在编写代码时应该尽量避免 Reflow 和 Repaint 过程的执行，如：避免在 JS 代码里直接改变元素的几何属性。</p>\n<h4 id=\"reflow-amp-repaint-简介\"><a href=\"#reflow-amp-repaint-简介\" class=\"headerlink\" title=\"reflow &amp; repaint 简介\"></a>reflow &amp; repaint 简介</h4><ol>\n<li><p>reflow 在渲染过程中称为回流，发生在 Render Tree 阶段，它主要是用来确定每个元素在屏幕上的几何属性，需要大量计算每个元素的位置。在代码里每改变一个元素的几何属性，均会发生一次回流过程。</p>\n</li>\n<li><p>repaint 在渲染过程中称为重绘，发生在 reflow 过程之后，当元素的几何属性确定之后便要开始将元素绘制在屏幕上展示。repaint 执行过程就是将元素的颜色、背景等属性绘制出来。在代码里没改变一次元素的颜色等属性时均会对相关元素执行一次重绘。</p>\n</li>\n</ol>\n<h4 id=\"如何触发-reflow-和-repaint-过程\"><a href=\"#如何触发-reflow-和-repaint-过程\" class=\"headerlink\" title=\"如何触发 reflow 和 repaint 过程\"></a>如何触发 reflow 和 repaint 过程</h4><ol>\n<li><p>改变元素 font-size：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style.fontSize = <span class=\"string\">'20px'</span>; <span class=\"comment\">// reflow,repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>改变元素盒模型margin、border、padding、width：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> styles = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style;</div><div class=\"line\">styles.margin = <span class=\"string\">'40px'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.border = <span class=\"string\">'40px solid #f00'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.padding = <span class=\"string\">'40px'</span>; <span class=\"comment\">// reflow,repaint</span></div><div class=\"line\">styles.width = <span class=\"string\">'300px'</span>; <span class=\"comment\">// reflow,repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>改变元素颜色、背景色属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> styles = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].style;</div><div class=\"line\">styles.color = <span class=\"string\">'#fff'</span>; <span class=\"comment\">// repaint</span></div><div class=\"line\">styles.backgroundColor = <span class=\"string\">'#f00'</span>; <span class=\"comment\">// repaint</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊：offset<em>、scroll</em>、client*、getComputedStyle、currentStyle：</p>\n</li>\n</ol>\n<ul>\n<li>由于浏览器在处理批量修改页面元素样式时，会将批量操作缓存起来，然后再做一次 reflow 过程（异步 reflow），避免每次操作都执行 reflow 消耗资源。但是如果在某个操作之后立马调用了以上执行属性，为了等够得到最新的样式，会检查缓存的操作，是否需要 reflow，这样就 flush 出最新的样式。</li>\n</ul>\n<h4 id=\"如何减少-reflow-和-repaint-过程\"><a href=\"#如何减少-reflow-和-repaint-过程\" class=\"headerlink\" title=\"如何减少 reflow 和 repaint 过程\"></a>如何减少 reflow 和 repaint 过程</h4><ol>\n<li><p>减少 JS 逐行修改元素样式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">body.className += <span class=\"string\">' class-name'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>离线处理 DOM 操作：</p>\n<ul>\n<li>通过 documentFragment 集中处理临时操作；</li>\n<li>克隆节点进行操作，然后进行原节点替换；</li>\n<li>使用 display:none; 进行批量操作。</li>\n</ul>\n</li>\n<li><p>减少样式的重新计算，即减少 offset<em>、scroll</em>、client*、getComputedStyle、currentStyle 的使用，因为每次调用都会刷新操作缓冲区，执行 reflow &amp; repaint。</p>\n</li>\n</ol>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/\">渲染性能</a>；</li>\n<li><a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\">Rendering: repaint, reflow/relayout, restyle</a> - <a href=\"http://www.cnblogs.com/ihardcoder/p/3927709.html\">译文</a>；</li>\n<li><a href=\"http://coolshell.cn/articles/9666.html\">浏览器的渲染原理简介</a>；</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/\">分析运行时性能</a>；</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-js\">如何使用 Timeline 工具</a>。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0qt08w50000c3x1697cdlfx","category_id":"cj0qt08wk0002c3x1m3tmqcdw","_id":"cj0qt08x8000bc3x1o16a12e1"},{"post_id":"cj0qt08x5000ac3x1jkdkt5hr","category_id":"cj0qt08x20007c3x1ynid1zgn","_id":"cj0qt08xe000fc3x1fqx62fby"},{"post_id":"cj0qt08wb0001c3x14amwibg0","category_id":"cj0qt08x20007c3x1ynid1zgn","_id":"cj0qt08xf000jc3x1pmxsqu9v"},{"post_id":"cj0qt08wn0004c3x1j2ayfeoc","category_id":"cj0qt08xa000cc3x11axcv8vc","_id":"cj0qt08xf000lc3x10jjnhmcd"},{"post_id":"cj0qt08wr0005c3x1j3o1tsso","category_id":"cj0qt08xe000hc3x1a8186z40","_id":"cj0qt08xi000oc3x1czpiufyt"},{"post_id":"cj0qt08x00006c3x1sgy88tl8","category_id":"cj0qt08xg000mc3x1hkpg012v","_id":"cj0qt08xn000rc3x1i16ylurb"},{"post_id":"cj0qt08yi000yc3x1yyj02zk8","category_id":"cj0qt08yw0012c3x1zypx4fxo","_id":"cj0qt08z60019c3x12fm76yxd"},{"post_id":"cj0qt08yq0010c3x1som75210","category_id":"cj0qt08z40017c3x1545ija4m","_id":"cj0qt08z8001cc3x1fupowc5x"},{"post_id":"cj0qt08yw0014c3x1fey3p1wf","category_id":"cj0qt08z7001ac3x1213brqi1","_id":"cj0qt08za001gc3x1bz06doa2"},{"post_id":"cj0qt08z10016c3x17i3u33hz","category_id":"cj0qt08z9001dc3x1i8kc6zba","_id":"cj0qt08zc001kc3x1jv3fpyz7"}],"PostTag":[{"post_id":"cj0qt08w50000c3x1697cdlfx","tag_id":"cj0qt08wn0003c3x1pijhel8w","_id":"cj0qt08x50009c3x1yes2dymg"},{"post_id":"cj0qt08x5000ac3x1jkdkt5hr","tag_id":"cj0qt08x30008c3x1llariho3","_id":"cj0qt08xc000ec3x1tn8v0e01"},{"post_id":"cj0qt08wb0001c3x14amwibg0","tag_id":"cj0qt08x30008c3x1llariho3","_id":"cj0qt08xe000gc3x1984lugra"},{"post_id":"cj0qt08wn0004c3x1j2ayfeoc","tag_id":"cj0qt08xb000dc3x1lksdpzda","_id":"cj0qt08xf000kc3x1f2wvs3vz"},{"post_id":"cj0qt08wr0005c3x1j3o1tsso","tag_id":"cj0qt08xe000ic3x17teiixul","_id":"cj0qt08xm000qc3x1bj1c18af"},{"post_id":"cj0qt08wr0005c3x1j3o1tsso","tag_id":"cj0qt08xg000nc3x1i7jx3q44","_id":"cj0qt08xn000sc3x15s9mqde0"},{"post_id":"cj0qt08x00006c3x1sgy88tl8","tag_id":"cj0qt08xk000pc3x1gkmf50r6","_id":"cj0qt08xp000vc3x1rgipddeo"},{"post_id":"cj0qt08x00006c3x1sgy88tl8","tag_id":"cj0qt08xo000tc3x1c9qlec2w","_id":"cj0qt08xp000wc3x1rpgtiqar"},{"post_id":"cj0qt08x00006c3x1sgy88tl8","tag_id":"cj0qt08xo000uc3x1o2d6ktq8","_id":"cj0qt08xp000xc3x1khyf4l6x"},{"post_id":"cj0qt08yi000yc3x1yyj02zk8","tag_id":"cj0qt08yw0013c3x1mtqyo8jr","_id":"cj0qt08za001fc3x1zmfol2s8"},{"post_id":"cj0qt08yi000yc3x1yyj02zk8","tag_id":"cj0qt08z40018c3x1746c0hn5","_id":"cj0qt08za001hc3x1cjcs8or2"},{"post_id":"cj0qt08yi000yc3x1yyj02zk8","tag_id":"cj0qt08z7001bc3x1w7aodin7","_id":"cj0qt08zb001jc3x1opis9x3s"},{"post_id":"cj0qt08yq0010c3x1som75210","tag_id":"cj0qt08z9001ec3x1ccq12erv","_id":"cj0qt08zd001mc3x1ynf2mva5"},{"post_id":"cj0qt08yq0010c3x1som75210","tag_id":"cj0qt08zb001ic3x115mtjain","_id":"cj0qt08zd001nc3x1i7van0q4"},{"post_id":"cj0qt08yw0014c3x1fey3p1wf","tag_id":"cj0qt08zc001lc3x16z5oq3vg","_id":"cj0qt08ze001pc3x1scwi6o2b"},{"post_id":"cj0qt08z10016c3x17i3u33hz","tag_id":"cj0qt08zd001oc3x1fhuk9sx0","_id":"cj0qt08zg001rc3x1heab3c2g"},{"post_id":"cj0qt08z10016c3x17i3u33hz","tag_id":"cj0qt08zf001qc3x1r5jra6g9","_id":"cj0qt08zg001sc3x1ah3fa34p"}],"Tag":[{"name":"Promise","_id":"cj0qt08wn0003c3x1pijhel8w"},{"name":"JFinal","_id":"cj0qt08x30008c3x1llariho3"},{"name":"性能优化","_id":"cj0qt08xb000dc3x1lksdpzda"},{"name":"单元测试","_id":"cj0qt08xe000ic3x17teiixul"},{"name":"auto-unit-test","_id":"cj0qt08xg000nc3x1i7jx3q44"},{"name":"前端团队","_id":"cj0qt08xk000pc3x1gkmf50r6"},{"name":"构想","_id":"cj0qt08xo000tc3x1c9qlec2w"},{"name":"精良","_id":"cj0qt08xo000uc3x1o2d6ktq8"},{"name":"javascript","_id":"cj0qt08yw0013c3x1mtqyo8jr"},{"name":"TDZ","_id":"cj0qt08z40018c3x1746c0hn5"},{"name":"Temporal Dead Zone","_id":"cj0qt08z7001bc3x1w7aodin7"},{"name":"css","_id":"cj0qt08z9001ec3x1ccq12erv"},{"name":"line-height","_id":"cj0qt08zb001ic3x115mtjain"},{"name":"XSS","_id":"cj0qt08zc001lc3x16z5oq3vg"},{"name":"Reflow","_id":"cj0qt08zd001oc3x1fhuk9sx0"},{"name":"Repaint","_id":"cj0qt08zf001qc3x1r5jra6g9"}]}}